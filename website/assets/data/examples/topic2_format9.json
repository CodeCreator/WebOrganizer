[
    {
        "url":"http:\/\/www.levelsncurves.com\/six-advantages-of-creating-ecommerce-mobile-app__trashed\/",
        "text":"In the current world, smartphones and tablets are being the primary source of productivity improvement. With their increasing demand, they have become the main focus of every business to reach to the target audience. Increasing competition to be the best in the market has given a rise to the increasing necessity of having an E-Commerce Mobile App.\nE-Commerce Mobile App not just tribute your E-Commerce websites but also offers you the chance to have more significant interaction with your users.\nSo, if you have an E-Commerce website and you are still thinking of having a mobile app, you must not delay your decision anymore.\nE-Commerce mobile apps add to the benefits of E-Commerce websites because of the advantages it offers.\n\nThe Advantages Of E-Commerce Mobile Apps Are\n\nFaster Mobile Apps\n\nMobile Apps loads the content faster. Mobile Applications are usually 1.5 times faster than mobile websites. Data retrieval in mobile apps takes place with a blink of an eye. With the increase in competition, businesses cannot afford to lack behind. Customers do not like slow sites and often approach to other market participants and mobile apps solve this problem by loading data must faster.\n\nExtensive Reach\n\nMobile Apps has wider reach as consumers nowadays carry their mobile phones wherever they go. Because of the wider reach of the mobile apps, the opportunity for location-based marketing and sales increases.\n\nIncreased Visibility\n\nMobile Apps has the advantage of 24*7 availability and visibility to your customers. They can go anywhere and their mobile apps will be with them. Mobile Apps has the potential to attract more and more customers. Ones downloaded mobile app will be on customer\u2019s phones forever and they will look at it even at the time of scrolling the apps which will result in more and more visibility of your app and hence more profits.\n\nBenefit of Push Notifications\n\nE-Commerce Mobile Apps provides the benefit of Push Notifications to smart phone users. Push Notifications are the constant reminders to the customers about your services and the products you offer. Push Notifications will create brand awareness and will help customers be updated with the latest product arrival. This help in providing the best user experience.\n\nEncourages Social Sharing\n\nIntegrate social sharing right into the app and let your customers do the advertising for you by sharing your merchandise on Facebook, Twitter, Instagram and all the other trending and most popular social media sites.\n\nPreferred By Customers\n\nCustomers mostly prefer to shop using their mobile phones because of the convenience involved with it. As mobile apps help users to save their precious time with easy access and fast retrieval of data, it is preferred by most of the customers.\n\nSo, what are you waiting for start your eCommerce mobile app development with us today!\n\n\nHave a Project in mind?\n\nLet's Get Started\n\nFeel Free to Enquire",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.6881762743,
        "format_confidence":0.7648162842
    },
    {
        "url":"https:\/\/dzone.com\/articles\/the-top-10-advanced-java-talks-you-should-see-to-s",
        "text":"Over a million developers have joined DZone.\n\nThe Top 10 Advanced Java Talks You Should See to Stay Relevant\n\nDZone's Guide to\n\nThe Top 10 Advanced Java Talks You Should See to Stay Relevant\n\nA great collection of videos from around the net which are essential viewing for any Java developer.\n\n\u00b7 Java Zone\nFree Resource\n\nBuild vs Buy a Data Quality Solution: Which is Best for You? Gain insights on a hybrid approach. Download white paper now!\n\nDuke Takipi\n\nLearn from the experts: watch some of the best Java videos available online!\n\nOne of the main resources for learning about new things in software development\u00a0is online talks and videos. You can find Java experts sharing their experience with you, without getting off the couch.\n\nIn the following post, we\u2019ve gathered 10 of our favorite speakers and topics that we believe every Java developer should watch. Get the popcorn, sit back and let Java blow your mind.\n\n1. Microservices @ Spotify\n\nKevin Goldsmith, VP engineering at Spotify, talks about the use of microservices in the company and why they are easier to test, deploy and monitor. He also invites you to use Spotify Apollo, the set of Java libraries that are used when writing microservices in Spotify.\n\nDownload the slides here\n\n2. Get a Taste of Lambdas and Get Addicted to Streams\n\nDr. Venkat Subramaniam is one of our favourite Java speakers as he always delivers talks with complex concepts in a fun and engaging way. Lambdas and streams are the flagship features of Java 8, and in this talk, you\u2019ll be able to experience the real power inside them. (By the way, if you\u2019d like a peek into Java 9, check out our post about 5 Features in Java 9 that WILL Change How You Develop Software).\n\n3. One Hacker Way\n\nErik Meijer, inventor of the Reactive Extensions (Rx), founder at Applied Duality, Inc. and the owner of the iconic colorful T-shirt, challenges the basic ideas on Scrum & Agile and how developers should be developing code for the future.\n\n4. Hardware Transactional Memory\n\nGil Tene, CTO and Co-Founder of Azul Systems, tells us about Hardware Transactional Memory \u2013 that aims to simplify concurrent programming by allowing a group of load and store instructions to execute in an atomic\/simultaneous way. In his talk, Gil elaborates about future chips that will support this, and how it can be helpful for JVMs as well.\n\nImage title\u00a0 \u00a0\u00a0 \u00a0\n\u00a0 Watch it on InfoQ\u00a0 \u00a0\n\n5. Fixing Code at 100mph: Techniques to Improve How You Debug Servers\n\nIn this talk, Tal Weiss, CEO and Co-Founder of Takipi, covers different techniques for production debugging like distributed logging, jstack, BTrace and custom Java agents. Tal also explains why you don\u2019t need log files to track production errors.\n\n6. Staying Ahead of the Curve\n\nTrisha Gee, Java Developer at MongoDB and a good friend of our blog, talks about the \u201cdangers\u201d of trying to stay ahead of the curve, and how you can balance them while embracing the change.\n\n7. Move Deliberately and Don\u2019t Break Anything\n\nUnlike Mark Zuckerberg\u2019s approach, Brian Goetz, Java Language Architect at Oracle, believes that programming language design is not just about type theory and grammars. In this video, he talks about some of the challenges and lessons of steering Java through major evolutionary changes, such as the motion to reduce verbosity from Java.\n\n8. Advanced Topics in Programming Languages: Java Puzzlers\n\nJosh Bloch, former Chief Java Architect at Google, along with Bill Pugh, presents eight programming puzzles for your pleasure. If you\u2019re looking for a challenge, check out Java Deathmatch (and don\u2019t forget to check your results).\n\n9. Scalawags: The Sound of Dotty, w\/ Martin Odersky\n\nScalawags is a monthly podcast\u00a0about Scala language hosted by Josh Suereth, Dick Wall, Heather Miller and Seth Tisue. This month, the team interviewed Martin Odersky about Dotty, a platform to try out new language concepts and compiler technologies for Scala.\n\n10. Hopelessness and Confidence in Distributed Systems Design\n\nWhen designing real-world distributed applications, we face many decision points. Understanding the tradeoffs that we face at these decision points lets us make smarter choices faster. In this talk, Camille Fournier will discuss a series of real-world distributed applications and some of the key tradeoffs that were made in these systems.\n\nBonus: JavaZone Productions\n\nJavaZone is Norway\u2019s largest IT conference, and each year the team behind it creates trailer parodies to persuade developers to join them. You\u2019ve probably seen the following video, but check out this link for more funny and creative videos.\n\nFinal Thoughts\n\nOnline sessions and talks are the best resources to expand our knowledge and learn about new, important and exciting elements in Java. While this is a short list, we\u2019re always looking for more videos to watch. Saw anything interesting? We would love to hear about it!\n\nSource Link\n\nBuild vs Buy a Data Quality Solution: Which is Best for You?\u00a0Maintaining high quality data is essential for operational efficiency, meaningful analytics and good long-term customer relationships. But, when dealing with multiple sources of data, data quality becomes complex, so you need to know when you should build a custom data quality tools effort over canned solutions. Download our whitepaper for more insights into a hybrid approach.\n\njava ,distributed ,videos ,java developer ,language\n\nPublished at DZone with permission of Henn Idan, DZone MVB. See the original article here.\n\nOpinions expressed by DZone contributors are their own.\n\n{{ parent.title || parent.header.title}}\n\n{{ parent.tldr }}\n\n{{ parent.urlSource.name }}",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9851100445,
        "format_confidence":0.9913095236
    },
    {
        "url":"https:\/\/www.cigniti.com\/blog\/9-best-practices-for-test-management-3\/",
        "text":"9 best practices for Test Management\n\nListen on the go!\n\nTest management is a comprehensive process involving multiple phases of risk analysis, test estimation, test planning, test organization, test monitoring & control, issues management, and test report & execution.\u00a0But\u00a0it has its own share of challenges\u00a0such as\u00a0lack of time for testing, lack of required resources, absence of\u00a0colocated\u00a0test teams, and ambiguity of\u00a0test\u00a0requirements. To ensure\u00a0the\u00a0maximum effectiveness of the test management process, it is imperative to overcome these challenges first.\u00a0\n\nA properly followed test management life cycle\u00a0consistently\u00a0helps meet and exceed customer demands in terms of product quality. The race among organizations to reduce the time to market with the best quality products is laying an even greater stress today on such a framework than ever before. Being the center of attention, if followed properly, the process will lead to better products, and thereby more satisfied customers.\u00a0\n\nLet us understand the best practices to follow for test management:\u00a0\n\nTest Management recommendations\u00a0\n\nBest practices for Test Management include keeping the test efforts\u00a0organized with well-defined processes and systems in place. Since different projects may have different specific testing requirements, an effective test management process can deliver a predictable and repeatable process.\u00a0Such processes\u00a0are usually easier to estimate and plan,\u00a0which help the overall management and control of a project.\u00a0\n\nTo overcome the challenges that hinder the implementation of a successful test management environment, organizations may try to use the following well-known practices to implement a successful\u202ftest management\u202fsystem:\u00a0\n\n1.\u00a0Begin the testing activities\u00a0earlier\u00a0in the SDLC\n\nEven though this is an unsaid rule,\u00a0few\u00a0organizations follow it. This leads to bugs being identified at a later stage \u2013 which adds on to the costs.\u00a0The test process, therefore, must begin as soon as\u00a0a few test cases have been written or if they can be extracted from the initial software requirements.\u00a0\n\n2.\u00a0Perform iterative tests\n\nSoftware testing must be performed iteratively. This risk-based approach helps generate important testing assets and also helps reduce problems going ahead by garnering focus on bugs or any unwelcome delays early on in the cycle.\u00a0\n\n3.\u00a0Reuse test assets and improve time spent every time\u00a0\n\nRecycling and reuse of test procedures\u00a0&\u00a0test automation objects\u00a0always help enhance the quality and efficiency\u00a0 of\u00a0 a product, and of teams too that can save a lot of time and effort by this simple strategy.\u00a0However, it requires test management skills to be able to foresee if a certain asset can be reused in\u00a0the\u00a0future.\u00a0\n\n4.\u00a0Utilize testing and testing strategies based on requirements\n\nDifferent strokes fell different oaks, they say. Similarly, to perform different types of tests, such as agile, security, mobile, big data and analytics,\u00a0and more,\u00a0you need to follow different testing approaches that suit the specific kind of test management framework. In other words, try to follow a requirements-based testing approach that not only helps in system\/application validation but also helps in calculating the testing efforts needed.\u00a0\n\n5.\u00a0Ensure proper coordination between co-located testing resources\n\nUtilizing the skills and effective coordination of co-located resources is the need of the hour as it helps overcome resource issues, maximize productivity, and improve timelines,\u00a0thereby improving ROI. To overcome the\u00a0 inherent technical challenges involved, proper tools and channels such as utilizing Web clients or automatically\u2013\u00a0replicated data must be used.\u00a0\n\n6.\u00a0Define & enforce flexible testing processes\n\nBecause different projects have different testing needs and require different testing efforts, we need customizable test management processes for creating an automated workflow. This process should be repeatable and also allow for further optimization and modifications as per requirement. For a successful test management implementation, it is extremely important to clearly define the process along with the workflow\u00a0and then enforce the same\u00a0within\u00a0the team.\u00a0This is especially true if your organization adheres to strict regulations such as CMMI- SVC v1.3, Maturity Level 5, ISO 9001:2008, ISO 27001:2013, or HIPPA. These standards need to be audited and thus have strict compliance needs for validation.\u00a0\n\n7.\u00a0Coordinate & integrate with the development teams \u2013 use DevOps shift-left practice\n\nTo achieve maximum communication and seamless integration of a product testing environment, testing and\u00a0 development teams need to work in complete tandem with each other. This improves quality, reduces any communication issues, and brings\u00a0any missed details\u00a0to the fore.\u00a0\n\n8.\u00a0Communicate the correct status at the right time\n\nThe thing with proper communication is that if not made at the right moment, it might also cost an opportunity. Proper test management involves complete sharing of all relevant data such as goals\u00a0and\u00a0status, in the right format, at the right time, to the right stakeholders, for a project to be successful.\u00a0\n\n9.\u00a0As someone said \u2013 \u201cTo save time, automate, automate, automate!\u201d\n\nPerforming the many tasks involved in test management involves a lot of time and effort. Utilize\u00a0specific\u00a0Test\u00a0 Management\u00a0tools\u00a0\u2013 commercial or opensource \u2013 to reduce the time spent. While most of these test\u00a0 management tools need to be installed in-house, there are others that can be accessed as Software as a Service\u00a0 (SaaS), for example, HP ALM\/Quality center,\u00a0QAComplete, Silk Central, Zephyr, JIRA, and IBM Rational Quality Manager.\u00a0\n\n\nIt is recommended to use newer approaches for implementing a successful test management scenario. Following the best practices suggested herein will help overcome almost all sorts of obstacles.\u00a0\n\nAt\u00a0Cigniti, we\u00a0have a\u00a0specialized, dedicated\u00a0Test Management team\u00a0involving\u00a0highlyskilled, co-located software testing professionals who ensure delivery of quality products\u00a0to accelerate time-to-market, reduce test\u00a0efforts,\u00a0and expenses.\u00a0Talk to our experts\u00a0to know how we can help you optimize your Software Test Life Cycle.",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9358513951,
        "format_confidence":0.9372085333
    },
    {
        "url":"https:\/\/www.pnet.co.za\/jobs\/Java-Developer.html",
        "text":"1674 results for\n\nJava Developer jobs\n\n  \u2022 1 of 67\n  \u2022 1 of 67\nAwesome tools \u2013 that simplify life \u2013 for a Java Developer\n\nPerhaps you are reading this article and are a web developer who spends a lot of your time immersed in Java &ndash; a programming language used throughout the world &ndash; in order to get your job done. It really is something Java Developers and so many other related professionals can&rsquo;t get away from. No matter how Java influences your line of work, you just have to get your Java coding right.\n\nIn order to sharpen your skills and continue to produce bug-free Java coding, you may need to latch onto the available tools. Being an international language of some sort, there are tools available from sources throughout the world and it can get a bit confusing as to what to consider and what tools to simply discard as time wasters.\n\nHere are some great tools for developers. They address various concerns for industry professionals. What we particularly like about them is rather than making extravagant suggestions without the actual empowerment, these offer great support for coding and development so that you can hopefully impress management with your work and be empowered to allow the quality of your work to negotiate a better salary for you.\n\nMake no mistake, in order to get the maximum benefits out of these tools, you already need to know the fundamentals of Java. They are not a means to skipping a process or avoiding the required Java training and experience that you need in order to function at peak. You cannot be a new bee when it comes to Java, but if you already know your way around it, then you may find great benefits in using these tools.\n\n1. Java Development Kit (JDK)\n\nWhile this may be intuitive to many Java Developers, it is still a great tool particularly if it includes the required Java Compiler, Java APIs and Java Run time-environment; all of which are important to help you get started with Java and from there, better and better.\n\n2. IntelliJ IDEA 13.1\n\nIf your job requires you to come up with creative and somewhat innovative new Java solutions, then you should consider getting a tool such as IntelliJ IDEA 13.1. Some of the features which can foster this includes, but are not limited to &ldquo;On-the-fly Code Analysis&rdquo; as well as &ldquo;Smart Code Completion&rdquo;. Unlike several other tools, it offers advanced support in terms of the above mentioned and other software development tools and information technology applications and resources. There&rsquo;s also web and mobile development support features that can be in your best interest to use and learn about.\n\n3. Clover\n\nSometimes while working you know that you are on to something and need tools that can help you work in a way that somewhat upholds privacy and yet help you with your jobs. Clover can be one of those tools because it allows you to focus on code that may turn out most problematic. This is great because it sort of acts as a smoke signal that can help you focus on specifics, especially during the code testing phases.\n\n4. Oracle JDeveloper\n\nWhat is great about this allegedly free IDE is that several developers in industry rave about it, particularly in helping you build a reliable Service Oriented Architecture with Java. The full development life cycle is supported allowing you to explore and hopefully come up with renewed Java solutions.",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.8537964225,
        "format_confidence":0.8288401961
    },
    {
        "url":"http:\/\/babich.biz\/effective-writing-for-your-ui-things-to-avoid\/",
        "text":"Effective Writing For Your UI: Things to\u00a0Avoid\n\nClear, accurate, and concise text makes interfaces more usable and builds trust.\u00a0\n\nBelow is a list of 16 things you should avoid in your writing:\n\n1. Jargon Words and Specific\u00a0Terms\n\nUnknown terms or phrases will increase cognitive load for the user. Do your best to avoid \u2018geek speak\u2019. A safe bet is to write for all levels of readers and pick common words that are clearly and easily understandable to both beginning and advanced users.\n\nBelow is an example of using jargon in error message:\n\nIt\u2019s not clear who is the target audience for this message\u200a\u2014\u200asystem administrators or office workers. Image credit: IDW\n\nSure, this may be situational. If the audience is familiar with this message then fine. Otherwise, avoid at all costs by make it simple and intuitive.\n\n2. Long Content Sections With a Lot of\u00a0Details\n\nIn most cases, it\u2019s not necessary to describe every detail in the first interaction. It\u2019s better to reveal increasing detail about features when the user explores them and actually needs the information.\u00a0\n\nPractical tips:\n\n  \u2022 For every message, ask yourself: does the user really need to know this?\n  \u2022 Write in small, scannable segments to facilitate discovery. Keep sentences under 30 words when possible.\n    Original image: dailyrindblog\n\n3. Using the Future Tense to Describe the\u00a0Action\n\nUse the present tense to describe product behavior. When you need to write in the past or future, use simple verb forms.\n\nDon\u2019t: \u201cMessage has been sent\u201d\n\nDo: \u201cMessage sent\u201d\n\n4. Mixing \u201cMe\u201d\/\u201dMy\u201d With \u201cYou\u201d\/\u201dYour\u201d\n\nIt can cause confusion to see both forms of addressing the user in the same context.\u00a0\n\nDon\u2019t: \u201cChange your preferences in My Account.\n\nDo: \u201cChange personal preferences in My Account.\u201d\n\n5. Using Words For\u00a0Numbers\n\nSave screen space\u200a\u2014\u200ause numerals in place of words for numbers.\n\nDon\u2019t: \u201cYou have three messages\u201d\n\nDo: \u201cYou have 3 messages\u201d\n\n6. Pronouncing \u201cWe\u201d\n\nFocus on the user and what they can do with your app, rather than what you or your app is doing for the user.\n\nDon\u2019t: \u201cTo get you started, we\u2019re showing you popular posts on Facebook.\u201d\n\nDo: \u201cGet started with these popular posts on Facebook.\u201d\n\nHowever, there\u2019s an exception for this rule\u200a\u2014\u200awhen a human actually does take action for a user, such as reviewing an appeal or responding to a suggestion. In such case, the use of \u201cwe\u201d is appropriate.\n\nDon\u2019t: \u201cYour appeal will be reviewed, and you will receive a response within a few days.\u201d\n\nDo: \u201cWe\u2019ll review your appeal and respond within a few days.\u201d\n\n7. Capitalizing All\u00a0Letters\n\nAll caps text\u200a\u2014\u200ameaning text with all the letters cap\u00adi\u00adtal\u00adized\u200a\u2014\u200ais fine in contexts that don\u2019t involve reading, such as acronyms or logos. However, when your message involves reading, don\u2019t force users to read it. As mentioned by Miles Tinker, in his landmark work, Legibility of Print, all-capital print greatly retards speed of reading in comparison with lower-case type. Also, most readers judge all capitals to be less legible. Faster reading of the lower-case print is due to the characteristic word forms furnished by this type. This permits reading by word units, while all capitals tend to be read letter by letter.\n\nText in all caps is hard for users to read\n\nThus, use sentence-style caps for all titles, headings, labels, menu items.\n\n\nDo: \u201cSearch settings\u201d\n\n8. Absolutes and Over-promising\n\nNever say \u201cnever\u201d is a great rule to follow.\n\nDon\u2019t: \u201cWe\u2019ll never send you promo emails\u201d\n\nDo: \u201cYou\u2019ll receive only important information\u201d Don\u2019t brag\u200a\u2014\u200areveal what a feature does, but don\u2019t say how great it is.\n\nDon\u2019t: Amazing deals at places you\u2019ll love\n\nDo: \u201cAll your savings in one place\u201d\n\n9. Exclamation Points\n\nExclamation points should be avoided as they could come across as shouting.\n\nDon\u2019t: \u201cLearn about the new features of the app!\u201d\n\nDo: \u201cWelcome\u201d\n\n10. Gender Ambiguity\n\nEnglish is one of the few languages that allows gender ambiguity (for example, \u201cyou can see their picture\u201d). Most other languages must be more specific (\u201cyou can see his or her picture,\u201d for example).\n\nBe specific about gender whenever possible\u200a\u2014\u200ause his, her or another names preferred or considered appropriate by the person concerned.\n\n11. Common Introductory Phrases\n\nCut out the wordiness. You should use simple, direct language that is easy for users to understand. All extra or common introductory phrases such as \u2018you must,\u2019 \u2018due to the fact that\u2019, \u2018in order to\u2019 should be omitted.\n\nDon\u2019t: Would you like to save your changes?\u201d\n\nDo: \u201cSave changes?\u201d\n\n12. \u201cAre You\u00a0Sure\u201d\u00a0\n\nThis part rarely adds any value for the question and in most cases isn\u2019t beneficial for the user.\n\nDon\u2019t: Are you sure you want to delete this photo?\u201d\n\nDo: \u201cDelete this photo?\u201d\n\n13. Culturally Specific\u00a0Idioms\n\nCulturally specific language can be difficult to translate and may be inappropriate in some contexts.\n\nDon\u2019t: \u201cYou really hit it out of the park!\u201d\n\nDo: \u201cGreat job!\u201d\n\n14. \u201cOK\u201d Button in\u00a0Dialogs\n\nA good dialog box isn\u2019t just about asking users which action they want to do. It\u2019s also about making each button clear. While \u2018OK\u2019 button is the standard convention for many dialogs, most apps can use a more user-friendly approach to dialog boxes. Instead of providing users the \u2018OK\u2019 button to confirm the action they want to do, it\u2019s more efficient to give users a button that\u2019s labeled with the specific action. This approach also reduces the likelihood of user errors, since not all users read the question or message in a dialog box.\n\nFor example, buttons for \u201cRemove photo\u201d dialog\n\nDon\u2019t: OK|Cancel\u201d\n\nDo: Remove|Cancel\u201d\n\n15. Vague Error\u00a0Messages\n\nError messages are an inevitability. But you should make them a seamless part of user experience. Your error messages sound like they\u2019ve been written for humans and in order to achieve this your messages should clearly state:\n\n  \u2022 What went wrong and possibly why.\n  \u2022 What\u2019s the next step the user should take to fix the error.\n    A typical error might state that \u201cthe data is invalid\u201d without telling the user why it\u2019s invalid (Is it a typo? Is it occupied?). Make sure the message is clear. Image credit: Material Design\n\n16. Blaming\u00a0User\n\nYes, users make mistakes, but if you want to keep their business, don\u2019t point your finger.\n\nImage credit: usabilla\n\nWrite the message so that the user isn\u2019t directly blamed for the error. Focus on the user problem, not the error itself.\n\nDon\u2019t: \u201cYou\u2019ve provided an incorrect email.\u201d\n\nDo: \u201cThis email address cannot be used. Please ensure that the spelling is correct.\u201d\n\n\nText in your app should complement your visual UI: simple, concise, direct, and efficient. It should be understandable by anyone, anywhere, regardless of their culture or language.\nThank you!",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.6770424843,
        "format_confidence":0.9441735148
    },
    {
        "url":"http:\/\/www.content-loop.com\/dont-crash-and-burn-with-your-bot-6-best-practices\/",
        "text":"Don\u2019t crash and burn with your bot: 6 best practices\n\n\nMauricio Padilla and Lexalytics\n\nMay 12, 2016\n\nWith Facebook\u2019s introduction of bots on Messenger last month, chatbots, which have been around for decades, have suddenly taken the leap from fun toy project to cutting-edge business proposition. With this rapid rise to prominence, it\u2019s critical to differentiate the hype from the true value bots can offer when you consider using one for your business.\n\nHere are some best practices to make sure your chatbot development project succeeds and doesn\u2019t turn into another Tay, the short-lived, bigoted A.I.-powered bot we came to know and fear.\n\n1. Set clear goals\n\nSince there are real costs to developing a chatbot, have a clear idea of what you hope to get out of the endeavor. Is it an opportunity to drive new sales? To learn from your existing customers? To streamline internal processes? Before jumping in, have clear ideas about who will be developing, testing and maintaining the chatbot as well as the value you hope to get from the project.\n\nA chatbot is an IT project. It requires developers and testers. It should be integrated into your larger information infrastructure and maintained. As your product lists and goals change, you\u2019ll need to update your chatbot too.\n\n2. Find the right use cases\n\nSome customer interactions are better served by a chatbot than others. If there are many specific choices a customer needs to make, you might be better off using a simple web form interface. If a process is high value and very personalized, like a sales pitch, you may want to keep a human in the loop.\n\nSo where do chatbots work best? They can listen to a customer\u2019s needs and help filter through a long list of choices, prompting the user for relevant information as required. They can use a customer\u2019s stated goal to perform more accurate search. They can inject whimsy into a process. And they can gather targeted feedback during an interaction.\n\nConsider a hybrid approach. If an existing shopping experience is working, you might include a helpful bot to answer questions off to the side and let the user navigate your inventory as they currently do.\n\n3. Connect to existing systems\n\nA chatbot needs to know about your business, and it needs to communicate what it learns to the appropriate employees. The worst way to accomplish that is to expect everyone to come to the bot. Don\u2019t give your chatbot an explicit product list that\u2019s certain to continually fall out of date. Connect it to your existing product database. Don\u2019t tell the sales team to log into a chatbot administration console to see what leads have come in. Export those directly to the existing sales management tools in use at your business. A well designed chatbot should fit naturally into your business setting like a new employee.\n\n4. Plan for failure\n\nHumans will invariably ask questions you didn\u2019t predict during design. Even the fanciest machine learning models powering your bot will make mistakes. Build expectations of failure into your bot. A user should always have an easy method to restart a conversation or back up to a previous stage. If the bot gets confused, it should fail gracefully. Politely ask the user to state what they\u2019re trying to accomplish. Sometimes a clearer explanation can get the bot back on track. If not, log the user\u2019s goal and add new branches to the chatbot later to deal with this case. If you can reliably catch the tasks that a user failed to accomplish, you\u2019ll have the data to make the most impactful updates next time you upgrade the bot.\n\nPromoted view from a Capgemini Expert\n\n\u00abThe Next Digital is the Digital of Next. AI and Cognitive solutions are in to make a radical change\u00bb\n\nRon Tolido's view on Digital\n\n5. Pay attention to tone\n\nYour chatbot is a face of your organization and an opportunity to delight or enrage existing and prospective customers. Just like an employee will tailor their language to a customer\u2019s tone, a chatbot needs to be aware of the reactions it is eliciting. Simply conveying concern and understanding towards a frustrating situation can go a long way towards alleviating hostilities. If a customer is praising your products or company, conveying happiness and gratitude will help cement the goodwill.\n\nSentiment analysis is a powerful tool for determining the emotional content of a message and a useful marker for controlling the flow of a conversation. Also, be ever vigilant for requests to speak with a human. Even if you have to take an email address and promise to get back to them, if the bot is not fulfilling a prospect\u2019s needs, make sure you give them some human attention rather than leave them to turn to a competitor.\n\n6. Listen!\n\nA chatbot isn\u2019t just a new medium for conveying information to customers. It\u2019s a new opportunity to learn from the wider world. How is your brand being perceived? Which products are causing issues? What features in your products are driving sales? What concerns do customers have about your company? And how does that correlate with geography or gender or customer loyalty or any other variable you might be able to measure?\n\nDoes your sales staff have questions it would like answered by prospects? Does development want to float a feature idea to the wider market? Is marketing concerned with whether a particular message is being picked up? A chatbot gives you a natural place to just ask. A chatbot is an opportunity to learn from anyone who will talk to it, both through targeted and open-ended questions. If you\u2019ve got existing business intelligence capabilities, the transcripts of chatbot conversations are a valuable source of additional insight. If you don\u2019t, a chatbot is a great place to start!\nMauricio Padilla is president of Lexalytics. He has over seven years experience in enterprise software sales, professional services, project management, and consulting.\n\nThis article was written by Mauricio Padilla and Lexalytics from VentureBeat and was legally licensed through the NewsCred publisher network.\n\nComment this article\n\nGreat ! Thanks for your subscription !\n\nYou will soon receive the first Content Loop Newsletter",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.6693165302,
        "format_confidence":0.9077225327
    },
    {
        "url":"http:\/\/www.ymc.ch\/de\/blog\/the-top-5-challenges-of-bdd-with-behatmink-best-practices-needed\/",
        "text":"While I have written a lot about the concept behind the tool Behat in an earlier blog post (\u201cBDD as an agile method\u201d), I want to deal with how to putautomated web acceptance testing with Behat and Mink into practice this time. Though, I neither give an introduction into Behat nor Mink here, there are already plenty of resources dedicated to that \u2013 most prominently the Quick Intro to Behat and the documentation on Mink\u2019s website. Instead, I want to present my top 5 challenges of practicing BDD with Behat\/Mink that I have accumulated from several projects I was involved in as a \u201cBDD-ish\u201d developer.\n\nIf you like pictures more than text\u2026 the top 5 challenges elaborated here are also included in these slides (at the very end):\n\n#1: Developers write scenarios\n\nWhile there is no standardized classification of agile testing artifacts, there is at least the common perception that tests rather \u201csupport programming\u201d or \u201ccritique the product\u201d, and that they are rather \u201ctechnology-facing\u201d or \u201cbusiness-facing\u201d. This proposal of a taxonomy was introduced by Brian Marick with his agile testing matrix already in 2003.\n\nAgile testing matrix by Brian Marick\n\nTo date, automated tests in general are regarded a \u201cdeveloper-only thing\u201d nonetheless. Maybe because unit tests are still the best known kind of automated tests and because they are indisputably technology-facing artifacts that support programming, stakeholders might be tempted to put automated acceptance tests in the same corner (or \u201cquadrant\u201d if strictly speaking in terms of the matrix). Even though automated acceptance tests created through BDD do support programming, they are definitely more business-facing than technology-facing. After all we employ a DSL for describing scenarios in the \u201clanguage of the customer\u201d not for the sake of the developer\u2019s affection for exotic programming languages. But even with that fact in mind, many stakeholders (also some developers) speak of integration testing when they think of any testing practices beyond ordinary unit testing. Thus, they still do not see that the involvement of the customer (or representative) is as essential as that of the developer in the creation of automated acceptance tests.\n\nFurther, the customer\u2019s involvement is pivotal in the case of the question whether an automated acceptance test should be created at all. In contrast to unit tests, acceptance tests should not be created by the initiative of the developer. Instead they should be artifacts the customer explicitly asked for. Of course, as a developer you can try to convince your customer of BDD by presenting an initial acceptance test suite that you have created completely on your own. You then do not only implement the \u201cexecutability\u201d of the scenarios but you also write the scenarios themselves. Though, in the case of StoryBDD (Behat), this way of convincing will hardly work apart from causing an ephemeral enthusiasm for the tests by the customer. And to establish BDD as an agile method is virtually impossible this way. Actually you will most likely fail much earlier: If the developer writes the scenario, it will look notably different from the scenario the customer had written. Even though some developers might be able of thinking in the proper domain language, they cannot create this language from scratch. In the worst case their scenarios might resemble source code instead of natural language.\n\n#2: Scenario abstraction level\n\nAs said before, scenarios written by developers look differently from those written by the customer. Regarding the typical developer\u2019s mindset, which is coined by a thoughtful use of words, the developer\u2019s description is probably more fine-grained than the customer\u2019s description. Just consider this (fictitious) example:\n\nWhen I fill my first name into the field \"first name\"\nWhen I fill my last name into the field \"last name\"\nWhen I fill ...\n\n\nWhen I fill the form\n\nOf course, we already found that developers should not write scenarios on their own. But our previous separation of project stakeholders into developers and \u201ccustomer\u201d (and additional stakeholders) has been way too black-and-white: Except for the very ideal case that your \u201ccustomer\u201d is the actual customer, who furthermore acts in the role of the user (this cannot be taken for granted), you probably have to deal with the problem of different scenario description styles as well. Just imagine your \u201ccustomer\u201d is the UX expert within your organization because there is no other representative available who comes closer to the actual customer\/user. In the case of such form-related browser interaction as exemplified above, the UX expert might \u2013 likewise to the developer \u2013 favor the fine-grained variant over the coarse variant.\n\nAnd even if there is a representative available who speaks the customer\u2019s domain language properly, it is still uncertain which abstraction level to use for describing the scenarios. The level has certainly to be higher than that of your unit\/integrations tests and it is definitely a best practice \u2013 if not necessity \u2013 that all of the scenarios belonging to a certain feature or user story are described on the same abstraction level. Though, besides these two prerequisites, the stakeholders have to find an agreement which concrete abstraction to start with. And it is not unlikely that it has to be changed in the future when more and more scenarios are added. Konstantin Kudryashov\u2018s presentation Behat by example provides good examples that show how to revise scenarios in respect of unifying and elevating the abstraction level of a description.\n\n#3: Redundancy\n\nBehat\u2019s DSL (named Gherkin) offers several possibilities to reduce redundancy in the scenario descriptions, such as arguments, backgrounds,scenario outlines, and tables. From the perspective of a developer these \u201creuse capabilities\u201d are very helpful when creating maintainable automated acceptance tests: It is a well-known fact that redundancy in source code impedes its maintenance. Certainly, the same does not necessarily apply to testing artifacts expressed in the form of prose. But in the case of BDD it does, because a step within a scenario description is matched against the available step definitions (i.e. the implementation of the steps in PHP code). Thus, less redundancy in the description leads to less redundancy in the PHP code and, therefore, to a potentially increased maintainability of the acceptance test constituted by the scenario. This blog post provides examples for how to apply the Gherkin\u2019s reuse capabilities in order to avoid redundancy (it is about Cucumber\u2018s implementation of Gherkin, but it is valid for Behat\u2019s as well).\n\nNonetheless, a developer, who is used to sophisticated programming languages, might still consider Gherkin\u2019s possibilities to reduce redundancy as limited. So why not augment the DSL\u2019s reuse capabilities to make it a more \u201cproper\u201d programming language? Well, the problem of limited reuse capabilities might certainly be relevant. But much more relevant than that is the problem that the understanding of those is limited as well \u2013 by the customer. And who defines what to write in the DSL and how? It is the customer after all. And even with the reuse capabilities that were given to Gherkin \u201cby birth\u201d, you can imagine scenario descriptions that are not understandable by the customer at all, just due to a heavy use of one or more of the reuse capabilities mentioned above.\n\n\n#4: Time-consuming refactoring\n\nAgile testing pyramid by Mike Cohn\n\nCreating and maintaining automated acceptance tests is very costly compared to unit or integration tests. In this context Mike Cohn\u2018s agile testing pyramid serves as a rule of thumb. The pyramid represents all automated tests on a quantitative basis. It is divided into three layers representing different kinds of automated tests: The unit layer at the bottom, the service layer at the middle, and the UI layer at the top.\n\nWhile there are several interpretations of the concrete meaning of each layer, it is commonly accepted to subsume unit and integration tests in the two lower layers, whereas acceptance tests can be assigned to the top layer as long as they are UI-related. The higher a layer resides in the pyramid, the more expensive its tests are in respect of the effort for creating and maintaining them. As it is a pyramid and not a cube, the rule of thumb here is that you should have considerably fewer acceptance tests than unit\/integration tests if you want to pursue a profitable cost-benefit ratio.\n\nThe costliness of automated acceptance tests is further reinforced by the disproportion between the effort for creating them and the effort for maintaining them. While both activities are more or less evenly balanced in the case of unit\/integration tests, this is not true in the case of automated acceptance tests (regardless of whether they were created through BDD or not): Extending existing tests or debugging broken tests in order to fix them requires you to run the acceptance test suite several times probably. In our case, running the acceptance test suite means executing all the scenarios. This execution takes place in real-time, i.e. all the interaction between user and browser is simulated with the same speed as in reality. Thus, maintaining automated acceptance tests becomes an incredibly time-consuming process if compared with maintaining unit\/integration tests, where programmatic possibilities such as Mocking and\u00a0Dependency Injection enables you to bypass parts of the subject under test that are time-consuming.\n\nIn contrast to an manual execution of the automated acceptance tests, an automatically triggered execution with Continuous Integration (CI) in mind could of course mitigate the maintenance effort, as it escalates earlier when a test gets broken. Not using CI at all for automated tests is even denominated \u201csloth\u201d in the 7 Deadly Sins of Automated Software Testing. Nonetheless, the effort for extending acceptance test remai... (truncated)",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9889435768,
        "format_confidence":0.7891303301
    },
    {
        "url":"https:\/\/dzone.com\/articles\/java-2017-surprises-and-2018-predictions",
        "text":"Java: 2017 Surprises and 2018 Predictions\n\nDZone 's Guide to\n\nJava: 2017 Surprises and 2018 Predictions\n\nJava continues to be dominant as JavaScript and Kotlin attract developers seeking something different and better. Here's what else happened this year.\n\n\u00b7 Java Zone \u00b7\nFree Resource\n\nGiven how fast technology is changing, we thought it would be interesting to ask\u00a0IT executives\u00a0to share their thoughts on the biggest surprises in 2017 and their predictions for 2018.\n\nHere's what they told us about Java.\n\nMike Kail, CTO, CYBRIC\n\n  \u2022 2017: Java continued to have a decent sized footprint, primarily due to both legacy apps along with the fact that Android applications use Java. Node.js, which is a JavaScript runtime, continued to increase in popularity.\n\n  \u2022 2018: I believe the transition from Java to JavaScript frameworks will slowly happen, and Node.js will continue to increase its deployment footprint.\n\nMark Little, Vice President, Engineering, Red Hat\n\n  \u2022 2017: This has been a big year for Java, with several significant developments contributing to the ongoing evolution of the technology. The most notable event in 2017 was Oracle\u2019s announcement to more fully open up Java EE by moving it to an open source foundation \u2014 and the subsequent announcement that it had selected the Eclipse Foundation to host the initiative as a top-level project called Eclipse Enterprise for Java (EE4J). Moving forward from Java EE 8 (launched in September -- another notable Java development this year), continued development of the platform is expected to happen under EE4J. In addition, we saw continued progress on the MicroProfile project with the v1.1 and 1.2 releases in 2017, further advancing the evolution of enterprise Java for microservices development.\n\n    2018: The efforts around EE4J represent a monumental shift and will not happen overnight. There are still many details that need to be sorted out; however, the pace of progress on the platform today compared to a year ago is a night-and-day difference. The community has been revitalized by the prospect of these changes and key stakeholders are actively engaged. It is an encouraging sign, and I anticipate this energy will continue to build momentum as we move into 2018. Red Hat has long been a proponent of a more open enterprise, and we were at the table with Oracle from the beginning of these conversations, along with peers from IBM. Together, and with the Java EE community at large, I believe we will see Java continue to be a dominant technology in the enterprise for years to come.\n\nPaul Kopacki, CMO, Realm\n\n  \u2022 2017:\u00a0The speed that the Android community has embraced Kotlin -- clearly there was a lot of desire to move to something more modern.\n\n  \u2022 2018: Kotlin will make inroads against Java on other platforms, but at a much slower pace. While Java as a language is facing competition from Kotlin, the JVM will continue to find new use cases, and will continue to be the strength of the Java stack.\n\njava, javascript, kotlin, microprofile\n\nOpinions expressed by DZone contributors are their own.\n\n{{ parent.title || parent.header.title}}\n\n{{ parent.tldr }}\n\n{{ parent.urlSource.name }}",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9765906334,
        "format_confidence":0.7520017624
    },
    {
        "url":"https:\/\/www.iuemag.com\/may2014\/sc\/things-aspiring-software-engineers-should-know-X.php",
        "text":"Science Pick\nA collection of write-ups that speak for what's trending in science & technology.\n\nThings aspiring Software Engineers should know - X\n\nAs a Software Developer, I started my journey in the Software Industry at Novell from where I moved to Citrix and later to Amazon. Being in this industry for close to 6 years now, I have met and learnt from many wonderful intellectuals and have worked with them on various top class products that directly or indirectly impact billions of lives worldwide.\n\nI have experienced diverse corporate cultures, working environments, software development practices and processes. During this journey where I accomplished some distinguished feats and also committed many silly mistakes, I have learnt lot of things of which I think some should be helpful and of interest to the aspiring Software Engineers. You may check out the points mentioned in the previous articles in this series. Here is another one-\n\nIt's not about the quantity but quality\n\nKnowing multiple languages thoroughly can be a plus point but it is certainly not mandatory to do so. Companies like Amazon, Google, Microsoft do not really care about which programming language you know and have worked with previously. What matters more is that you know fundamental concepts well and know how to utilize them.\nthings aspiring software engineers should know,its not about quantity but quality\nFor example, if you are well versed with Object Oriented Programming concepts, you can use them in any existing Object Oriented Programming language or even a newly created one. On the other hand, if you know lot of languages but lack in knowledge of concepts you wont be able to do much or effective even with what you know.\n\nSame is the case with tools. Many companies do not use tools available in market but use the in-house built ones. If you have clear understanding of how the tools of a certain category work, you can understand and use almost any tool in that category with some effort. However, if you have just mugged up the commands or key combinations to use, small change in interface may be big enough to drive you crazy.\n\nMy sincere suggestion to you would be to not try to just learn little bit of many languages. Knowing one or two thoroughly in each paradigm like procedural programming and object oriented programming is sufficient. Focus more on learning the concepts and their implementations so that you can apply those in any language you may need. Similarly, understand how things are working instead of just mugging up how to use them.\nThis is one of the things that I seriously think an aspiring Software Engineer should know. If you think some point should be added to this topic or some topic deserves to be added to this series, do post a comment and let me know. Keep watching for more. If you are keen on learning more about the better software development practices you can start following right from the college days, do get a copy of my first book \"Hello World - Student to Software Professional\" published by Partridge (A Penguin Random House Company). Now available worldwide on all the MAJOR ONLINE Stores - Amazon, Google Play, Flipkart, Barnes & Noble and many others.\n\nCopyrights \u00a9 2021 Inspiration Unlimited eMagazine\n\nAny facts, figures or references stated here are made by the author & don't reflect the endorsement of iU at all times unless otherwise drafted by official staff at iU. This article was first published here on 11th May 2014.\nAshish Vaidya\nAshish Vaidya is a contributing writer at Inspiration Unlimited eMagazine.\n\nHave something to share? Drop us a line below!\nTop Read\nOf The Month\nA Notebook That Lasts Forever And A Gifting Idea That is Priceless",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9516094923,
        "format_confidence":0.5379045606
    },
    {
        "url":"http:\/\/blog.teamtreehouse.com\/new-course-roundup-http-django-css-android",
        "text":"NewsNew Course Roundup: HTTP, Django, CSS & Android\n\nFaye Bridge\nwrites on March 21, 2016\n\nShare with your friends\n\n\nEvery week, new content is published to the growing\u00a0Treehouse Library! Here is a short list of what was added the week of March 14, 2016.\n\nStart learning to code today with a free trial on Treehouse!\n\n\nHTTP Basics\u00a0\u2013\u00a0Chris Ramacciotti\n\nIn this course, we\u2019ll take a look at the underlying method that devices use to communicate with each other: HTTP, or the HyperText Transfer Protocol. In particular, we\u2019ll focus on how a modern web browser automates the sending of HTTP requests and the receiving of HTTP responses.\n\nThreads and Services\u00a0\u2013\u00a0Ben Deitch\n\nLearn about Services in Android, which can perform long-running operations in the background like downloading a large file.\n\nCSS Transitions and Transforms\u00a0\u2013 Guil Hernandez\n\nCSS transitions and transforms can create simple animations that enhance user interactions in websites and apps. In this course, you\u2019ll build an interactive image gallery using CSS transitions and transforms.\n\nYou\u2019ll use transition properties to define durations, delays, and easing functions. Then, you\u2019ll learn how to rotate, scale, and move elements in 2D and 3D space, with CSS transforms.\n\nDjango ORM\u00a0Kenneth Love\n\nDjango has a very powerful ORM that provides us a huge amount of convenience when building our apps. In this course, we\u2019ll learn about and use many of the methods and tools that Django gives us including ordering results, selecting only certain attributes, excluding results that match a particular value, and more.\n\n\nIntegrating PHP with Databases \u2013\u00a0Alena Holligan\n\nYou already know the basics of PHP, but building a PHP-driven page is just the first step in mastering PHP. The true power of PHP shines when you connect it to a data source like an API or a Database. To introduce you to databases, we\u2019ll start with an example project \u2014 a Personal Media Library application.\n\nCustomizing the Django Admin\u00a0\u2013\u00a0Lacey Williams Henschel\n\nThe Django Admin is a powerful and free tool that Django gives you to help you manage the content on your site. Customizing the admin makes it easier for you, and the other administrators of your website, to get things done quickly. The built-in admin that ships with Django is great, and there is room to put your own spin on it. Learn how to customize the look and functionality of the Django Admin site to make it even more useful.\n\n\nInterested in learning more? Sign up for a Free Trial\u00a0and get started today.\n\nLeave a Reply\n\nWant to learn more about CSS?\n\nLearn how CSS allows you to apply visual styling to HTML elements with colors, fonts, layouts, and more.\n\nLearn more",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9488810897,
        "format_confidence":0.8892172575
    },
    {
        "url":"https:\/\/www.brickandmobile.com\/tag\/mobile-website\/",
        "text":"5 Tips & Best Practices for Building Premium Mobile Websites\n\nOver the past few months we\u2019ve had the pleasure of working with mobile resellers from across the globe who\u2019ve helped us gather valuable insights into what works best when developing premium mobile websites. Below is a list of tips and best practices to take into",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.903105855,
        "format_confidence":0.7009655237
    },
    {
        "url":"https:\/\/www.mytechlogy.com\/IT-blogs\/21515\/top-reasons-why-swift-perfect-for-iphone-ios-app-development-services\/",
        "text":"\n\nI'm not curious\n\nTop Reasons Why Swift Perfect for iPhone\/iOS App Development Services\n\nPublished on 21 March 18\nTop Reasons Why Swift Perfect for iPhone\/iOS App Development Services - Image 1\n\nApple\u2019s Swift programming language has emerged as a preferred language for iPhone app development Services owing to several motivating factors. This blog introduces reasons to 6 reasons why swift stands out as the favorite for iPhone application development Services.\nAfter years of Objective-C dominating the iOS app development scenario, Apple released Swift as an alternative to the traditional coding language. The introduction of Swift incited a sense of surprise as well as a bit of confusion in the iPhone application development community. This happened due to Apple\u2019s claim that the Swift programming language was far better than its predecessor.\nThere were several predictions and continuous feedback from developers that opened up room for further discussions on the new language. After the initial phase of introduction, it was noticed that an iPhone app development services would choose Swift over Objective-C. More developers across the world have expressed their preference of accepting Swift over other languages available for iOS development.\n\nLet\u2019s take a look at six motivating factors that make Swift an obvious favorite:\n\n1. Faster, Steadier:\nSwift reduces the potential risk of mistakes in the source code through the use of spontaneous reference counting system. This robust capability of handling error and typos makes this language much steadier than Objective-C.\nFurthermore, Swift\u2019s runtime application is stronger than that of Objective-C. With Swift Apple has been able to provide faster speed has been successful with this language. For instance, a complicated object sort would run 3.9x faster as compared to an implementation of the same algorithm in Python. The same algorithm would have run 2.8x faster in Objective-C than the Python version.\n\n2. Safer and More Secure:\nThe mobile application market is expanding at a rapid pace with immense competition with increasing amounts of sensitive data being made accessible. Developing a safe and secure app, therefore, becomes a top priority.\nThe language constructions and the syntax of Swift eliminates a broad range of possible mistakes that are common in Objective-C. As a result of such stability, one can expect fewer crashes and similar issues in the overall app functioning. While this does not prevent developers making mistakes during the coding, it certainly cushions the consequences of writing bad codes.\n\n3. Clean Syntax:\nOne of the most basic yet significant aspects of a coding language is its readability. This language has a clean syntax that makes it easier to read and write. As compared to Objective-C, the number of lines of code required to implement an option are fewer.\nMoreover, Swift\u2019s Objective-C skeleton provides an object-oriented method of coding, which makes it easier for the developers to compose codes in an organic way. This helps them to save time as less time and effort is required to handle complex codes.\n\n4. Highly Interactive Environment:\nWith the release of Swift programming language, Apple introduced Xcode Playgrounds and Swift Playgrounds as the two effective interactive coding environments. This is highly useful for beginners as it would help them to learn and explore coding during iPhone app development using Xcode Playgrounds.\nMoreover, it helps them to explore various Swift concepts. Developers can improve their iPhone application development services and skills as they can easily create app prototype using Xcode Playgrounds. Swift language provides instant feedback that makes it more interactive and simplifies the app development process.\n\n5. Dynamic Application Development Environment:\nThe time taken for an application to load on an endpoint device is a vital factor in the success of a mobile application. With Swift, developers can use libraries that are dynamic in nature. Dynamic libraries are a gamut of codes that can be executed and linked to an application. The libraries load directly into the\n\n6. Compatibility:\nOne of the significant factors that every iPhone app development services ensure while developing an iPhone app is compatibility with the operating system. memory that reduces the initial app size. This activity eventually helps to enhance the performance of the app. Applications that are developed with this language are compatible not only with the latest versions but with previous iOS versions as well. This is because the Swift\u2019s runtime dynamics libraries are fixed within the application bundle. These libraries allow the app to perform seamlessly on all versions of iOS.\nTop Reasons Why Swift Perfect for iPhone\/iOS App Development Services - Image 2\nTop Reasons Why Swift Perfect for iPhone\/iOS App Development Services - Image 3\nThis blog is listed under Development & Implementations and Mobility Community\n\nView Comment (1)\nPost a Comment\n\nPlease notify me the replies via email.\n\n  \u2022 We hope the conversations that take place on will be constructive and thought-provoking.\n  \u2022 To ensure the quality of the discussion, our moderators may review\/edit the comments for clarity and relevance.\n  \u2022 Comments that are promotional, mean-spirited, or off-topic may be deleted per the moderators' judgment.\n  1. 24 March 18\n\n    Thanks for sharing. I hope it will be helpful for too many people that are searching for this topic. - roll the ball\n\nYou may also be interested in\nAwards & Accolades for MyTechLogy\nWinner of\nTop 100 Asia\nFinalist at SiTF Awards 2014 under the category Best Social & Community Product\nFinalist at HR Vendor of the Year 2015 Awards under the category Best Learning Management System\nFinalist at HR Vendor of the Year 2015 Awards under the category Best Talent Management Software\nHidden Image Url",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9890339375,
        "format_confidence":0.9814018607
    },
    {
        "url":"https:\/\/thenextweb.com\/entrepreneur\/2015\/04\/03\/a-6-step-survival-guide-for-non-technical-founders\/",
        "text":"A 6-step survival guide for non-technical founders\n\nA 6-step survival guide for non-technical founders\n\nAsh Read is the founder of Nudge, a Twitter community management and customer service tool.\u00a0This article first appeared on Medium.\n\nI\u2019m not gonna lie to you.\n\nBuilding a product is really, really hard work.\n\nEspecially when you can\u2019t push the pixels and dive into the codebase yourself.\n\nAs a non-technical person, starting a software business can seem like an uphill battle. Here are the 6 things that helped me get from idea to launching a saas product as a non-technical founder.\n\n1) Validate your idea\n\nWhen I first came up with the concept of Nudge, I wanted to make sure that it was something that solved a pain point for other people, not just myself.\n\nTo begin with, I scrambled together my ideas into a Google Doc and sent a real short 1\u20132 line summary of the idea round to a few people I know and made a few cold calls, to see if it was an idea that other people would buy into.\n\n\u201cI\u2019d use that, yeah.\u201d\n\n\u201cThat would definitely solve a problem I have, could you let me know when you launch?\u201d\n\nOther people liked the idea, \u201cphew.\u201d It felt good to know that.\n\nNext, I called in a favour, and asked a friend to help me create a one page site that explained what Nudge would do\u200a\u2014\u200asimilar to the approach Joel Gascoigne used when he first launched Buffer.\n\n\nI launched the one page site a couple of days after coming up with the idea. To promote it I wrote a couple of blog posts and shared the link on relevant community sites like Hacker News and Inbound.org for feedback.\n\nOnce I had received some more sign ups and interest in the product I decided to go ahead and get it built.\n\nIf you don\u2019t know someone who can help out with creating a one page site there are plenty of solutions out there: you could use a WordPress theme or a service like Strikingly and Launch Rock.\n\n\nWithout the ability to develop an MVP yourself, you need some validation that what you\u2019re building is something that your target audience will use.\n\n2) Learn to visually present ideas\n\n\u201cSo what do you mean by \u2018conversation tab\u2019?\u201d\n\nAs a non techie, you have to find ways to clearly present your ideas to the people you\u2019re working with.\n\nI found out quickly that words can be interpreted in different ways, and while a written brief is definitely essential, visuals are also key in supporting your vision.\n\nI have a basic knowledge of Photoshop and sometimes use that to mock up design changes or simple layout ideas.\n\nHowever, for basic wireframes, I use a tool called wireframe.cc. This allows me to quickly and easily map out my vision and create wireframes that people can navigate through and get a real feel for how the app should work.\n\n\n\nTranslate your ideas into something visual. It\u2019ll not only help everyone you\u2019re working with but also help you to clearly see how your vision can become reality.\n\n3) Master the art of giving good feedback\n\n\u201cThe homepage icons are too big.\u201d\n\n\u201cI want our customers to be able invite team members on this page.\u201d\n\nThis was the type of feedback I used to send. It was very functional feedback. It said what I wanted, but it didn\u2019t give a clear enough message on what exactly should be changed.\n\nGood feedback should be very black and white.\n\nA better, more constructive way to send over feedback on the above points would have been:\n\n\u201cThe homepage icons are too big. Could you make them 25 percent smaller.\u201d\n\n\n\u201cThere should be an email form allowing people to invite their team members to join Nudge on this page. This should go underneath the main heading, and the fields needed are: [field 1], [field 2]. Here\u2019s a wireframe I put together.\u201d\n\nThis makes the feedback much clearer and helps the technical team to understand exactly what I\u2019d like.\n\nGood feedback is essential for any project; especially if you want to keep within deadlines and stick to budgets. Poor feedback can lead to delays and what is a 30-minute fix, could take 3\u20134 hours if the feedback isn\u2019t clear and multiple revisions are needed.\n\nWith clear, concise feedback things definitely move a lot smoother.\n\n\nPut yourself in the shoes of your design and development teams and think about what information they need to do what you\u2019ve asked.\n\n4) Become a planning maven\n\nThere\u2019s an old saying, that \u201cfailing to plan is planning to fail\u201d and this certainly rings true for web projects.\n\nThe first few weeks of building Nudge were pretty chaotic. We had a brief that I\u2019d worked up which listed the functionality needed on the product and this guided us though the early development, but I certainly could have done more planning to help things move along with less hiccups.\n\n\u201cWe need some more structure,\u201d explained our developer. And I completely agreed.\n\nWe switched to working in sprints, and planned out every fine detail of each piece of functionality.\n\nThis switch meant I could always be planning ahead on the next sprint and our developers could focus on the task in hand.\n\nWith each sprint being throughly planned and reviewed by before commencing it meant that 90 percent of the questions were answered before the work started.\n\nThis was far more productive for both sides.\n\n\nAny development project can get complicated very quickly, even a few, seemingly small, features can make the process 10x more difficult without proper planning. Get as detailed as possible early on to avoid pitfalls.\n\n5) Test like there\u2019s no tomorrow\n\nI don\u2019t think any web build has ever worked perfectly at the first attempt\u200a\u2014\u200aand I doubt one ever will either.\n\nTesting is a hugely important stage of getting a new product to market. And when it comes to testing you\u2019ll need to be on the ball to catch all the big, juicy bugs and small ones, too.\n\nTesting is something you can do on your own. But for the best results, I\u2019d recommend drafting in a few beta testers to help out.\n\nBeta testers will be fresh to your product and will catch things you\u2019ve missed for sure.\n\nAs soon as I felt ready to show Nudge to some beta testers, I reached out to the people who signed up on the one page site I mentioned earlier in this post and also submitted to BetaList to find some more early adopters who were keen to try new tools and provide feedback.\n\nWhen it comes to reporting bugs\u200a\u2014\u200aeven as small as typo\u2019s\u200a\u2014\u200ait\u2019s important to supply as many details as possible. When I\u2019d encounter a bug I\u2019d always make sure to report:\n\n  \u2022 The page I found it on\n  \u2022 What needed changing\n  \u2022 A screenshot\n  \u2022 Details on the browser I was using\n  \u2022 The journey I was on (e.g. sign up or upgrading to pro)\n\nIf a design or layout change was needed, I would also supply a mock up of how I felt it should look too.\n\n\nWhen you\u2019re close to a project, you can easily miss some bugs and typo\u2019s. Try to get your app in-front of a group of beta testers before you open up to the world.\n\n6) Think ahead\n\nThough customer service and analytics might seem a mile off when you first start a project, you should think ahead about what sort of tools you need to run your business. For example:\n\n  \u2022 How will you handle customer service?\n  \u2022 Will you need analytics software?\n  \u2022 How will you handle payments?\n\nOften, these types of tools need to be implemented within the code of your website and the earlier you know what needs doing the better. Remember, \u201cfailing to plan is planning to fail.\u201d\n\nIt\u2019s not just third party tools you need to think about ahead of time. There are a number of other areas that you should think about before you come to the end of your development, including:\n\n\nWhere will your app be hosted? You need a reliable host that can scale with your business. When it comes to deciding on a hosting company the top three things I look for are:\n\n  \u2022 Reliability: you want your site to be up\n  \u2022 Customer support: when there\u2019s an issue with your hosting, you want to be assured they\u2019ll respond quickly and deliver top notch support.\n  \u2022 User friendliness: some hosting sites are very technical. I like one that allows me to easily manage the tasks I need to, such as setting up new email addresses from our domain.\n\nIf you\u2019re planning on setting up a blog on your domain it\u2019s best to get this sorted before you\u2019re ready to launch. Decide on which platform you\u2019ll set up the blog (e.g. WordPress or Ghost); what domain it will be on and make sure everything is working before you launch.\n\nAs a non-technical person, you want to be able to update small things on your website like typos and images. Make sure you think about how you\u2019ll handle these content updates before it\u2019s too late.\n\nYou\u2019ll need an admin tool to help your customers with their issues and customer service tickets. Even the smallest issue like updating an email address or working out why they experienced a certain bug can be hard without access to the essential details.\n\n\nCarefully consider everything you need alongside your product when it comes around to launch and get everything planned in way before it\u2019s needed.\n\nThese past few months have been quite a journey. I\u2019ve learned a lot and I\u2019ve got a lot more learning ahead of me still.\u00a0The above, are just a few of the things I\u2019ve picked up along the way and I think they\u2019ve really helped me become a better non-technical founder.\n\nIf, like me, you\u2019re not technical and you\u2019re embarking on a development project I hope these points useful.\n\nRead Next: Why leaving your comfort zone can be so rewarding\n\nRead next: Bounce's London taxi app shows promise but needs more drivers and lower fares",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.7423089743,
        "format_confidence":0.6621195078
    },
    {
        "url":"http:\/\/www.vienna-rb.at\/blog\/2017\/01\/11\/picks\/",
        "text":"User group for Viennese rubyists\n\norganizing meetups for Ruby and Rails developers in and around Vienna, Austria.\n\nPicks \/ What the vienna.rb Team Thinks Is Worth Sharing This Week\n\n01\/11 Picks!\n\nIn a series on this website we\u2019ll entertain YOU with our picks - or: what we think is worth sharing - every week. Books, articles, gems, fun stuff\u2026 you\u2019re in for an eclectic mix! So, here\u2019s for the one-hundred-ninety-third edition:\n\n  \u2022 vim-nerdtree-tabs - A Vim plugin allowing NERDtree and tabs to work together.\n  \u2022 Memrise - Free-ish platform for learning spoken languages, with videos of natives speaking!\n  \u2022 Vienna BEAMers - A bi-weekly Elixir study group held here in Vienna.",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.7112576365,
        "format_confidence":0.8926059604
    },
    {
        "url":"http:\/\/jmobile.io\/heres-some-tips-to-develop-an-app-with-great-design-for-2018\/",
        "text":"Here\u2019s some tips to develop an app with great design for 2018\n\nwritten by\n\n\nWednesday January 24th, 2018\n\n\nPeople say don\u2019t judge a book by its cover, but frankly, it is important to nicely cover your book because it basically represents what\u2019s inside. When people download an app, they see the icon, name, contents, review, and so on. There are thousands of similar apps on market and people download those apps to see something really good. However, it only takes few minutes to decide whether they want to use the app or not. This is why designing your app is really important.\n\nLet\u2019s see up-to-date mobile app design trends for 2018 and catch people\u2019s attention.\n\n\n\nMinimalism and simple color schemes\n\nWhen the app has too many design elements, it may cause much-unwanted confusion for the user. Creating a minimalistic design makes the whole experience much easier-just click that button!\n\n\u201cLess is more\u201d rule also pertains to the variety of colors.\n\n\n\nMaterial Design: Young and Innovative\n\nIt was 2014 when we first met the concept of Material Design. Nowadays, material Design appears to be the most flexible solution offering light and dark backgrounds. Also, Material Design gives space for creativity and innovations letting designers add more features to the new version.\n\n\n\nIn-App Gesticulation\n\nIt\u2019s too soon to assume designers have used all their creativity in this regard. Gestures seem more exciting than using buttons because of two reasons:\n\n  \u2022 Hand-play makes the user experience more real and erases borders between a smartphone and its owner.\n  \u2022 Gestures make it faster! Deleting a letter within a second is more than possible now.\n\n\n\nFunctional Animations\n\nDeveloping user experience, functional animation lets them immerse in the application. Functional animation is especially important when you create a multitasking application.\n\n\n\nOnboarding and Offboarding Experience\n\n\u201cGet on board!\u201d \u2013 that\u2019s what we\u2019re screaming to our precious users out loud. One of the up-to-date trends is a progressive onboarding experience when the app makes friends with a user outright. Offboarding means saying goodbye in the equally nice way. If you managed to surprise a customer on this stage, be ready to get the word of mouth advertising.\n\n\n\nTouch ID\n\nThis feature not only saves your nerves but also saves much time you usually spend on long verification processes. And what have we mentioned before? Right, any app should be a real speed master.\n\n\nTrends somehow reflect people\u2019s everyday needs and behavior. It\u2019s the most basic and fundamental roles of app developers and UI\/UX designers to catch the trends in order to make app successful.\n\n\n\n\nwritten by",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9590114951,
        "format_confidence":0.8316746354
    },
    {
        "url":"https:\/\/www.kennethlange.com\/7-tips-for-designing-a-better-rest-api\/",
        "text":"API Development\n\n7 Tips for Designing a Better REST API\n\nIf you need to develop a REST API for a database-driven application, it\u2019s almost irresistible not to use the database tables as REST resources, the four HTTP methods as CRUD operations, and then simply expose your thinly-wrapped database as a REST API:\n\nOperation HTTP SQL\n\nThe problem is that one of the foundations of the REST architecture is that the client-facing representation of a resource must be independent of the underlying implementation, and implementations details should definitely not be leaked to the client, which is all too easy with the database-driven approach.\n\nIt\u2019s also important to ask yourself if an almost raw database is the best interface you can offer your API users? I mean there is already a near-perfect language for doing CRUD operations on database tables, it\u2019s called SQL\u2026 And you probably have some business logic on top of those tables that your API users would appreciate not having to re-implement in their own code.\n\nSo how do you move beyond this database-oriented thinking and closer to a more RESTful design for your API?\n\nLet\u2019s find out\u2026\n\n1. Begin with the API User in Mind\n\nBestselling author and architect Sam Newman\u2019s great book on microservices provides a powerful alternative to the database-driven approach for designing REST web services. It\u2019s useful even if you don\u2019t plan to use microservices.\n\nNewman suggests that you divide your application into bounded contexts (similar to business areas). Each bounded context should provide an explicit interface for those who wish to interact with it. Implementation details of the bounded context that don\u2019t need to be exposed to the outside world are hidden behind the interface.\n\nYou should use this explicit interface as the basis for your API design. Start by asking yourself what business capabilities do the API user needs, rather than what data that should be shared. In other words, ask yourself what does this bounded context do? and then ask yourself what data does it need to do that?\n\nThe promise is that if you wait with thinking about shared data until you know what business capabilities you need to offer, it will lead to a less database-oriented design.\n\nI think his approach is a good way to jolt you out of the database-driven mindset, but you need to be careful that you don\u2019t end up designing a REST-RPC hybrid.\n\nWhat I also like about this approach is that it minimizes the interface and doesn\u2019t expose all data by default, but hides internal data (like logging and configuration tables) from the client and instead focuses on what the client actually needs.\n\nThis also fits beautifully with veteran API designer Joshua Bloch\u2019s maxim saying that When in doubt, leave it out (from his highly popular presentation on API design), and it also harmonizes with the REST principle that a representation of a resource doesn\u2019t need to look like the underlying resource, but can be changed to make it easier for the client.\n\nSo feel free to think about what would be the easiest interface for the API user, and then let your resource take data from multiple tables and leave out columns that are irrelevant to the job that clients need to perform.\n\n2. Use Subresources to Show Relationships\n\nAn attractive alternative to only using top-level resources is to use subresources to make the relationships between resources more obvious to the API user, and to reduce dependencies on keys inside the resource representation.\n\nSo how do you decide what resources should be subresources? A rule of thumb is that if the resource is a part of another resource then it should be a subresource (i.e. composition).\n\nFor example, if you have a customer, an order and an order line then an order line is a part of an order, but an order is not a part of a customer (i.e. the two exists independently and a customer is not made up of orders!)\n\nSo the URIs would look like this:\n\n\nA different rule of thumb is to also include aggregations as subresources. That is, a belongs to relationship. If we use this rule then an order belongs to a customer, so the path would look like this:\n\n\nSo what rule should you pick?\n\nThe idea with subresource is to make your API more readable. For example, even if you don\u2019t know the API you can quickly guess that POST \/customer\/123\/orders will create a new order for customer 123.\n\nHowever, if you end up with more than about two levels then the URI starts to become really long and the readability is reduced.\n\nYou also need to be aware that subresources cannot be used outside the scope of their parent resource. In the second example, you need a customer id before you can lookup a order, so if you want a list of all open orders (regardless of customer) then you cannot do it in the second example.\n\nEhh, so what to pick?\n\nIf you want a flexible API, aim for fewer subresources. If you want a more readable API, aim for more subresources.\n\nThe important thing is that whatever rule of thumb you pick then be consistent about it. I mean the API user might disagree with your decision, but if you are using it consistently throughout your API, he or she will probably forgive you.\n\n3. Use Snapshots for Dashboard Data\n\nA deal-breaker for using subresources is that the client might need to access data across subresources to get data for a dashboard or something similar. For example, a manager might want to get some statistics about orders across all customers.\n\nBefore you go ahead and flatten your whole API, there are two alternatives you should consider.\n\nFirst, remember that there is nothing that prevents you from having multiple URIs that point to the same underlying resource, so beside \/customers\/{id}\/orders\/{id}, you could add an extra URI to query orders outside of the customer scope:\n\n\nTo minimize the duplication of functionality, you can limit the top-level \/orders URI to only accept GET requests, so if clients want to create a new order, they will always do it in the context of a customer.\n\nOf course, you need to be careful not to duplicate resources unnecessarily, but if there is a customer need, then there is a customer need, and we need to find the best possible solution.\n\nIn RESTful Web Services Cookbook, Chief Engineer at eBay (and former Yahoo Architect) Subbu Allamaraju suggests an alternative approach called snapshots.\n\nFor example, if an order manager wants to see some specific statistics (5 latest orders, 5 biggest clients, etc.) then we can create a snapshot resource that finds and returns all these information:\n\n\nI personally like the snapshot approach better, because it doesn\u2019t feel like querying a database. But with that said, the snapshot approach requires an intimate knowledge of the API user, and the extra order top-level resource will offer more flexibility.\n\n4. Use Links for Relationships\n\nAnother way to show relationships between resources, without falling back on using keys in an SQL-like manner, is to embed links inside your responses:\n\n  \"id\": 123,\n  \"title\": \"Mr.\",\n  \"firstname\": \"Han\",\n  \"surname\": \"Solo\",\n  \"emailPromotion\": \"No\",\n  \"_links\": {\n    \"self\": {\n      \"href\": \"\"\n    \"contactDetails\": {\n      \"href\": \"\"\n    \"orders\": {\n      \"href\": \"\"\n\nA cool thing about links is that they allow autodiscovery by clients! When the client gets the response back then it can see in the _link section what other actions it can follow from here. This is just like when you are surfing the web where you come to a page and then you can follow its links to new pages.\n\nAnother nice thing is that clients will have fewer hard-coded links in their code, which will make the code more robust. If the client wants to see the customer\u2019s orders, it can just follow the orders link to get them.\n\nHowever, there are different opinions about if you should use links, or not\u2026\n\nVinay Sahni writes in his excellent blog post Best Practices for Designing a Pragmatic RESTful API that links are a good idea, but we are not ready to use them yet. On the other hand, the RESTful maturity model says that when you start using links you have reached the highest level of REST maturity.\n\nSo what to do?\n\nWell, Dr. Roy Fielding, an expert on software architectures and the inventor of REST architectural style, flatly said on his blog that if you don\u2019t use links it ain\u2019t REST services, and he kindly encourages you to use another buzz word for your API!\n\n5. Hide Internal Codes\n\nIn an earlier post, I incidentally leaked internal codes in the job_id column on the employees table:\n\n\nNeedless to say, this is an implementation detail that gives away that we are using a relational database, and experienced Oracle users would instantly spot that it\u2019s Oracle\u2019s sample HR schema. This leaking makes it harder to switch to a document-oriented database, like MongoDB, where there is no concept of foreign keys.\n\nBut even if the chance of switching to MongoDB is zero, it still makes the response harder to read.\n\nSo a better approach is to let the REST API translate the internal code to the human-readable value that the code represents (i.e. \u201cShipping Clerk\u201d) and then also remove the Id part of the field name.\n\n  \"job\":\"Shipping Clerk\" \n\nThis version is definitely more readable, but a fair concern is if the service will be slower now that it needs to lookup the value? I used to be an avid reader of Tom Kyte, the Oracle DB expert, and still remember that you should always optimize from measurements. I mean there\u2019s a good chance that the HTTP cache will help us out and make it less of a bottleneck than it appears at first glance.\n\nAs a rule of thumb, if performance means everything to you (or you have a lot of lookup fields) then you might consider leaking the internal codes. Otherwise, you should provide a more readable API by hiding them.\n\n6. Translate Automatically\n\nBut what about translations? What if you have a multilingual application that has translations of the internal code in multiple languages? How do you handle that?\n\nSimple! You let the API us... (truncated)",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9903401732,
        "format_confidence":0.6647734046
    },
    {
        "url":"https:\/\/revelry.co\/insights\/development\/awesome-remote-pair-programming\/",
        "text":"8 Ways To Make Remote Pair Programming Awesome\n\nRevelry Labs\n\nUnleashing Human Potential with Technology\n\nremote pair programming\n\n8 Ways to Make Remote Pair Programming Awesome\n\nWhat is Pair programming?\n\nPair programming might be a well-known agile development practice, but it remains sort of a mystery for many. And for those who are unsure of the practice, remote pair programming might seem even more challenging. But once you get the hang of it, pairing is so effective in improving code quality, making less errors, and helping you to\u00a0always be learning.\u00a0\n\nWant to know even more about our process?\n\nGo for a deep dive into the Lean Agile Process at Revelry.\nGet in touch and let us know what we can build with you.\n\nPairing is a learned skill, only learned by practicing. I\u2019d like to help everyone understand how beneficial pairing is, even though it doesn\u2019t come naturally to everyone. So, take every opportunity you can to practice pairing, including utilizing remote pair programming.\n\n8 basics that will make remote pair programming awesome for everyone involved:\n\npairing1: Basic setup\n\nFor remote pair programming, you\u2019ll need your basics in place. Strong wifi and a quiet environment is obviously important. But don\u2019t overlook the other non-obvious basic elements:\n\nUse a headset and a microphone, not your computer\u2019s mic. Using a dedicated microphone just helps make sure all machine humming, fans, and other background noise is kept out of the communication.\n\nUse video conferencing software. Being able to see each other\u2019s faces when pairing \u2013 especially when remote pair programming \u2013 is important. It helps you pick up on cues for when to jump in and when to let your pair finish a line while in the zone.\n\nBut don\u2019t rely on video conferencing for the actual process of pairing. Screen sharing, even if you\u2019re able to draw on someone\u2019s screen, is actually collaborating, not pairing.\n\nRun Zoom or Slack for communication, but run one of these tools for the act of pair programming:\n\nWemux \u2013 Best if two people are VIM users.\nAtom-pair \u2013 Snappy, but the person who starts the \u2018portal\u2019 will only see the changes tracked on the correct file.\nVisual Studio Live Share \u2013 Just released at the time of writing this post, so be sure to share your thoughts if you\u2019ve used it!\nTeletype for Atom \u2013 This is similar to VS live share: both offer live collaboration on the same codebase. This was also recently announced, but is actually available to use, albeit in beta.\n\nDon\u2019t let tools stop you though. You can also set up a structure where one person drives for a period of time, pushes up changes to remote, and then you switch roles.\n\n2: Water\n\nYou\u2019re going to talk more than you would during any other coding session. So, stay hydrated. Take care of yourself. This is no place for martyrs.\n\nWork-life alliance applies\u00a0during\u00a0work as well as outside of work.\n\nPractice self care. A pairing session is a partnership between two\u00a0human people so remind and allow each other to take care of your\u00a0human needs, starting with, you know, water.\n\n3: Breaks\n\nSpeaking of human needs, more water means more bio breaks. Agree upfront to take breaks.\n\nSet a timer so that no one fears the interruption that ends up pushing you an hour past the agreed-upon break time. This is pair programming, not a\u00a0marathon coding session.\n\nHave a stretch, take a walk. Eat a meal or have a snack and come back to pairing. The exercise might jog out some other ways of looking at the task. And you\u2019ll keep your mood from turning sour due to lack of blood sugar.\n\nAnd, do a check-in with yourself and your pairing partner. If it\u2019s just not working for you today, please, don\u2019t force it. No one gets hurt when you take a moment to recharge. But, trying to force the issue and collaborate with someone, for potentially long periods of time, is definitely a recipe for failure.\n\nEveryone is different and you know yourself the best. Know and practice the techniques that prepare you to bring your engaged and intentional mindset to your pairing session.\n\n4: Arrive prepared\n\nPairing is a meeting. It\u2019s important to reframe pair programming so that each participant is able to prepare for it appropriately. And you wouldn\u2019t accept a meeting without first, making sure it\u2019s necessary and second, being able to review the agenda, right?\n\nSo, first:\u00a0is this meeting necessary?\n\nRubber duck with yourself, or in your team chat, to figure out if your problem can be resolved with other methods. More often than not, someone else on the world wide web has dealt with a similar issue and can help point you in the right direction. If that fails, well, now you\u2019ve done a good chunk of the meeting prep. You should have answers to these questions before engaging your colleague so you can quickly tee up the meeting with context:\n\nClearly articulate the challenge to yourself, and then to your pair partner, before agreeing that yeah \u2013 the meeting is necessary.\n\nAnd then, you\u2019ll be able to frame up the pairing meeting with the agenda.\n\nYour pair programming agenda should answer these questions:\n\n  \u2022 What will we work on?\n  \u2022 How long will we spend?\n  \u2022 When will we take breaks?\n  \u2022 Who will drive first?\n  \u2022 When will we switch driving and observing?\n  \u2022 What type of pairing meeting is this?\n\n5: Types of pairing\n\nOh, I\u2019m glad you asked. There are different reasons for pair programming. And you should always be specific with your pairee about what type of time and energy investment they are signing up for when you make the invitation.\n\nA quick sync and alignment\u00a0\u2013 for example, a developer and a designer look at an approach together. When you request a pairing meeting for this type of issue, you can set the expectation with the other person that this is a brief sync-up. \u201cThis is what I think I\u2019m going to do to solve this problem and I\u2019d like some feedback.\u201d\n\nThere probably won\u2019t be any actual coding in this pairing, but rather a demonstration of code and a full background on a problem.\n\nIdentify a specific block in a smaller piece of code\u00a0\u2013 You\u2019ve got something that\u2019s a bit squirrelly, and you know someone who can help un-squirrel it so that you can get past the block. There will be coding performed during this pairing, but it will likely be solved in less than an hour.\n\nA more complex lesson or story to work\u00a0You\u2019ll want to be specific when setting up pair programming for a complex issue. You\u2019ll use this type of pairing when you want to learn something new and benefit from your partner\u2019s experience. But for the most part, this type of pairing will probably be used when you have a high-scoring ticket to work.\n\nThis pairing is going to take several hours. So it\u2019s important to consider everyone\u2019s commitments and schedule accordingly. We all have work to do, but we also all really care about helping each other do our best work.\n\nThat\u2019s why\u00a0respect\u00a0needs to be one of the most important ways to make remote pair programming awesome.\n\n6: Respect\n\nRespect is the underlying value that needs to be applied across all aspects of pairing. In a positive developer culture, pairing is always welcome. Pairing should not be considered as a problem or a sacrifice that someone else is making.\n\nThat being said, respect for each other\u2019s time and commitments must be exercised. Demonstrate this respect by carefully scheduling pairing and setting reasonable expectations for your pairing meeting.\n\nUsing intentional language is another way to show respect. Be thoughtful about the words that you choose when working together to learn, teach, and solve problems. For instance, \u201cNo, that\u2019s not what I meant\u201d can be better phrased by asking \u201cDo you mind if I drive?\u201d\n\nThis makes for an easier transition that also gets your point across.\n\nConvey respect by listening more and using empathy to understand your partner\u2019s preferred form of communication. We are all different. Some of us talk more than others. Some of us communicate better non-verbally. We all have our thing. Be respectful of each other and create a better environment for more productive questions.\n\nListening more becomes even more important in remote pairing, since you lose the body language and energy cues you get when co-located. So really, listen more and stop interrupting each other.\n\nRemember that the goal of pairing is to solve a problem and maintain a productive vibe.\n\nIf you love building great software, consider joining the Revelry team!\n\nJoin our Makers Slack Community to meet some Revelers and other folks interested in building and innovating technology.\n\n7: Think out loud\n\nThere\u2019s a lot of thinking to be done when building code. But when you\u2019re pairing, you\u2019re solving a problem together, so say what you\u2019re thinking.\u00a0Silence happens when you\u2019re not aware of what you\u2019re doing. Share the calculations that are happening in your head.\n\nThinking out loud is extremely educational in this setting. It helps the other person understand the concept, the background, and the story. And it keeps the conversation going.\n\nTalk more than you think you need to. Silence is really, really awkward when you are remote. If you\u2019re afraid to talk or if you find it hard to communicate your ideas, an easy start is to just say exactly what you are doing in the code.\n\nPart of the benefit of pairing is just this \u2013 practicing your ability to understand and communicate your thoughts, even if it sounds like mumbo-jumbo in the beginning.\n\n8: Focus\n\nThe physical disconnect when remote pair programming makes social media tangents all the more alluring. But instead of getting ping-ponged around by all the world\u2019s distractions, use the solitude to your advantage. The goal is active engagement, so devote your attention to the task at hand.\n\nI have a hard time understanding how a loud, busy open office is a good environment for focused work sessions. When remote pairing, we can control our distractions by removing them entirely.\n\nMove to a physical location where a chatty coworker won\u2019t be a factor.\n\nSnooze your notifications on your p... (truncated)",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9729568362,
        "format_confidence":0.7036493421
    },
    {
        "url":"http:\/\/bugsanddebugs.blogspot.com\/2017\/11\/the-10-most-common-mistakes-that-unity.html",
        "text":"Nov 3, 2017\n\nThe 10 Most Common Mistakes That Unity Developers Make\n\nUnity is a great and straightforward tool to use for multi-platform development. Its principles are easy to understand, and you can intuitively begin to create your products. However, if some things are not taken in mind, they\u2019ll slow your progress when you proceed with your work to the next level, as you are moving from initial prototype phase or approaching a final release. This article will provide advice on how to overcome most common problems and how to avoid fundamental mistakes in your new or existing projects. Please note, the perspective of this article is focused more on 3D application development, but everything mentioned is applicable for 2D development as well.\u00a0\n\nCommon Unity Mistake #1: Underestimating Project Planning Phase\n\nFor every project, it\u2019s crucial to determine several things before the application design and programming part of the project even begins. These days, when product marketing is an important part of the whole process, it\u2019s also important to have a clear idea of what the business model of the implemented application will be. You have to be sure what platforms you will be releasing product for, and what platforms are in your plan. It\u2019s also necessary to set the minimal supported devices specifications (will you support older low-end devices or just more recent models?) to have the idea of what performance and visuals you can afford. Every topic in this article is influenced by this fact. From a more technical point of view, it should be necessary to set in advance the whole workflow of creating assets and models while providing them to the programmer, with particular attention to iteration process when the models will need some more changes and refinements. You should have a clear idea about desired frame rate and vertex budget, so the 3D artist can know in what maximal resolution the models have to be, and how many LOD variations he has to do. It should also be specified how to unify all the measurements to have a consistent scale, and import process throughout the whole application. The way the levels will be designed is crucial for future work because the division of the level influences the performance a lot. Performance concerns have to always be in your mind when designing new levels. Don\u2019t go with unrealistic visions. It\u2019s always important to ask yourself the question \u201ccan it be reasonably achieved?\u201d If not, you shouldn\u2019t waste your precious resources on something hardly achievable (in case it\u2019s not part of your business strategy to have it as your main competitive advantage, of course).\n\nCommon Unity Mistake #2: Working with Unoptimized Models\u00a0\n\nIt\u2019s critical to have all your models well prepared to be able to use them in your scenes without further modifications. There are several things that the good model should fulfill. It\u2019s important to set the scale correctly. Sometimes it\u2019s not possible to have this correctly set from your 3D modeling software because of different units these applications are using. To make everything right, set the scale factor in models import settings (leave 0.01 for 3dsMax and Modo, set 1.0 for Maya), and note that sometimes you will need to re-import objects after changing the scale setting. These settings should assure that you can use just basic scale 1,1,1 in your scenes to get consistent behavior and no physics problems. Dynamic batching will also more likely work correctly. This rule should also be applied on every subobject in the model, not just the main one. When you need to tweak object dimensions, do it with regards to other objects in 3D modeling application rather than in Unity. However, you can experiment with scale in Unity to find out appropriate values, but for the final application and consistent workflow, it\u2019s good to have everything well prepared before importing to Unity. Regarding object\u2019s functionality and their dynamic parts - have your models well divided. The fewer subobjects, the better. Separate parts of the object just in case when you need them, for example, to move or rotate dynamically, for animation purposes, or other interactions. Every object and its subobjects should have its pivot properly aligned and rotated with regards to its main function. The main object should have the Z axis pointing forward and pivot should be at the bottom of the object for better placement to the scene. Use as few materials on objects as possible (more on this below). All assets should have proper names which will easily describe its type and functionality. Keep this consistency throughout all of your projects.\n\nCommon Unity Mistake #3: Building Interdependent Code Architecture Prototyping and implementation of functionality in Unity is quite easy.\u00a0\n\nYou can easily drag and drop any references to other objects, address every single object in the scene, and access every component it has. However, this can also be potentially dangerous. On top of noticeable performance issues (finding an object in the hierarchy and access to components has its overhead), there is also great danger in making parts of your code entirely dependent on each other. Or being dependent on other systems and scripts unique to your application, or even on the current scene, or current scenario. Try to take a more modular approach and create reusable parts which can be used in other parts of your application, or even shared across your whole application portfolio. Build your framework and libraries on top of Unity API the same way you are building your knowledge base. There\u2019s a lot of different approaches to ensure this. A good starting point is the Unity component system itself. Complications may appear when particular components need to communicate with other systems of the application. For this, you can use interfaces to make parts of your system more abstract and reusable. Alternatively, you can use an event-driven approach for reacting to particular events from outside scope, either by creating a messaging system or by registering directly to parts of the other system as listeners. The right approach will be trying to separate gameObject properties from program logic (at least something like model-controller principle), because it\u2019s tough to identify which objects are modifying its transform properties, like position and rotation. It should be exclusively its controller\u2019s responsibility. Try to make everything well documented. Treat it always like you should return to your code after a long time and you need to understand quickly what exactly this part of the code is doing. Because in reality, you will quite often get to some parts of your application after some time and it\u2019s an unnecessary obstacle for quickly jumping into the problem. But do not overdo this. Sometimes, an appropriate class, method or property name is quite sufficient.\n\nCommon Unity Mistake #4: Wasting Your Performance\u00a0\n\nThe latest product line of mobile phones, consoles, or desktop computers will never be so advanced that there will be no need to care about performance. Performance optimizations are always needed, and they provide the foundation for making the difference in how your game or application looks like in comparison to others on the market. Because when you save some performance in one part, you can use that to polish other parts of your application. There are a lot of areas for optimizations. The whole article would be needed just to scratch the surface about this topic. At least, I will try to divide this domain into some core areas.\u00a0\n\nUpdate Loops\n\nDon\u2019t use performance intensive things in update loops, use caching instead. A typical example is an access to components or other objects in a scene or intensive calculations in your scripts. If possible, cache everything in Awake() methods, or change your architecture to a more event-driven approach to trigger things just when they\u2019re needed.\n\n\nFor objects that are instantiated quite often (for example, bullets in an FPS game), make a pre-initialized pool of them and just pick one already initialized when you need it and activate it. Then, instead of destroying it when it is not required anymore, deactivate it and return it to the pool.\n\n\nUse occlusion culling or LOD techniques to limit rendered parts of the scene. Try to use optimized models to be able to keep vertex count in the scene under control. Be aware, vertex count isn\u2019t just the number of vertices on the model itself, but it\u2019s influenced by other things like normals (hard edges), UV coordinates (UV seams) and vertex colors. Also, a number of dynamic lights in the scene will dramatically influence overall performance, so try to bake everything in advance whenever possible.\n\nDraw Calls\u00a0\n\nTry to reduce draw calls count. In Unity, you can achieve draw calls reduction by using static batching for still objects and dynamic batching for the moving ones. However, you have to prepare your scenes and models first (batched objects have to share same materials), and batching of dynamic objects works only for low-res models. Alternatively, you could combine meshes by the script into one (Mesh.CombineMeshes) instead of using batching, but you have to be careful not to create too large objects which can\u2019t take advantage of view frustum culling on some platforms. In general, the key is to use as little materials as possible and share them across the scene. You will sometimes need to create atlases from textures to be able to share one material between distinct objects. A good tip is also to use higher resolution of scene lightmaps textures (not generated resolution, but texture output resolution) to lower their number when you are baking light in larger environments.\n\nOverdraw Problems\u00a0\n\nDon\u2019t use transparent textures when not necessary, as it will cause fill-rate problems. It is okay to use it for complicated and more distant geometry, like trees or bushes. When you need to use it, prefer alpha blended shaders in... (truncated)",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.984742403,
        "format_confidence":0.9106653929
    },
    {
        "url":"https:\/\/blog.ijun.org\/2008\/11\/10-reasons-why-sql-server-2008-is-going.html",
        "text":"Just like its predecessor, SQL Server 2008 is taking its sweet time to actually ship. However, unlike its predecessor, it won't just be a \"worthwhile upgrade\". It will kick ass.\n\nHere are the top 10 reasons why.\n\n10. Plug-in model for SSMS. SSMS 2005 also had a plug-in model, but it was not published, so the few developers that braved that environment were flying blind. Apparently for 2008, the plug-in model will be published and a thousand add-ins will bloom.\n\n9. Inline variable assignment. I often wondered why, as a language, SQL languishes behind the times. I mean, it has barely any modern syntactic sugar. Well, in this version, they are at least scratching the the tip of the iceberg.\n\nInstead of:\n\nDECLARE @myVar int\nSET @myVar = 5\n\nyou can do it in one line:\n\nDECLARE @myVar int = 5\n\n\n8. C like math syntax. SET @i += 5. Enough said. They finally let a C# developer on the SQL team.\n\n7. Auditing. It's a 10 dollar word for storing changes to your data for later review, debugging or in response to regulatory laws. It's a thankless and a mundane task and no one is ever excited by the prospect of writing triggers to handle it. SQL Server 2008 introduces automatic auditing, so we can now check one thing off our to do list.\n\n6. Compression. You may think that this feature is a waste of time, but it's not what it sounds like. The release will offer row-level and page-level compression. The compression mostly takes place on the metadata. For instance, page compression will store common data for affected rows in a single place.\n\nThe metadata storage for variable length fields is going to be completely crazy: they are pushing things into bits (instead of bytes). For instance, length of the varchar will be stored in 3 bits.\n\nAnyway, I don't really care about space savings - storage is cheap. What I do care about is that the feature promised (key word here \"promises\") to reduce I\/O and RAM utilization, while increasing CPU utilization. Every single performance problem I ever dealt with had to do with I\/O overloading. Will see how this plays out. I am skeptical until I see some real world production benchmarks.\n\n5. Filtered Indexes. This is another feature that sounds great - will have to see how it plays out. Anyway, it allows you to create an index while specifying what rows are not to be in the index. For example, index all rows where Status != null. Theoretically, it'll get rid of all the dead weight in the index, allowing for faster queries.\n\n4. Resource governor. All I can say is FINALLY. Sybase has had it since version 12 (that's last millennium, people). Basically it allows the DBA to specify how much resources (e.g. CPU\/RAM) each user is entitled to. At the very least, it'll prevent people, with sparse SQL knowledge from shooting off a query with a Cartesian product and bringing down the box.\n\nActually Sybase is still ahead of MS on this feature. Its ASE server allows you to prioritize one user over another - a feature that I found immensely useful.\n\n3. Plan freezing. This is a solution to my personal pet peeve. Sometimes SQL Server decides to change its plan on you (in response to data changes, etc...). If you've achieved your optimal query plan, now you can stick with it. Yeah, I know, hints are evil, but there are situations when you want to take a hammer to SQL Server - well, this is the chill pill.\n\n2. Processing of delimited strings. This is awesome and I could have used this feature...well, always. Currently, we pass in delimited strings in the following manner:\n\nexec sp_MySproc 'murphy,35;galen,31;samuels,27;colton,42'\n\nThen the stored proc needs to parse the string into a usable form - a mindless task.\n\nIn 2008, Microsoft introduced Table Value Parameters (TVP).\n\nCREATE TYPE PeepsType AS TABLE (Name varchar(20), Age int)\nDECLARE @myPeeps PeepsType\nINSERT @myPeeps SELECT 'murphy', 35\nINSERT @myPeeps SELECT 'galen', 31\nINSERT @myPeeps SELECT 'samuels', 27\nINSERT @myPeeps SELECT 'colton', 42\n\nexec sp_MySproc2 @myPeeps\n\nAnd the sproc would look like this:\n\nCREATE PROCEDURE sp_MySproc2(@myPeeps PeepsType READONLY) ...\n\nThe advantage here is that you can treat the Table Type as a regular table, use it in joins, etc. Say goodbye to all those string parsing routines.\n\n1. Intellisense in the SQL Server Management Studio (SSMS). This has been previously possible in SQL Server 2000 and 2005 with Intellisense use of 3rd party add-ins like SQL Prompt ($195). But these tools are a horrible hack at best (e.g. they hook into the editor window and try to interpret what the application is doing).\n\nBuilt-in intellisense is huge - it means new people can easily learn the database schema as they go.\n\nThere are a ton of other great features - most of them small, but hugely useful. There is a lot of polishing all over the place, like server resource monitoring right in SSMS, a la Vista.\n\nI'd love to finish this entry on a happy note, but I can't, because I just finished perusing Editions of SQL Server 2008 page. In addition to the Standard, Enterprise, Developer and Express editions, there are now Workgroup, Web, Compact (which has nothing to do with SQL Server) and Express Advanced editions. Here is the comparison matrix. And you thought picking a version of Vista was complicated.",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.8575114012,
        "format_confidence":0.971514523
    },
    {
        "url":"https:\/\/www.practicalecommerce.com\/Bloglist-Sean-Schofield-Creator-of-Spree-Ecommerce",
        "text":"Practical Ecommerce\n\nBloglist: Sean Schofield, Creator of Spree Ecommerce\n\n\u201cBloglist\u201d is an occasional feature where we ask ecommerce professionals the blogs that they read, and why. For this installment, we asked Sean Schofield, the creator of the Spree open-source ecommerce platform and a Practical eCommerce blogger. Schofield, a Ruby on Rails developer, is also the CEO of Railsdog, a technology consulting firm specializing in web application and ecommerce development. Schofield told us the blogs he likes, as well as podcast and screencast sites he visits.\n\nSean Schofield\n\nSean Schofield\n\nGet Elastic\n\nProvides a nice overall discussion of various ecommerce topics. It\u2019s a good reference for customers when they have questions about a specific topic since the Get Elastic blog posts usually have detailed examples with pictures. I don\u2019t read very many non-technical blogs but this is one of two ecommerce blogs (beside Practical eCommerce) that I do\nread when I have time.\n\nRyan\u2019s Scraps\n\nExcellent examples of the latest features to be added to Ruby on Rails. Subscribe to this RSS feed and you\u2019ll be on top of all the important developments.\n\nRails Inside\n\nOnline magazine dedicated to Ruby on Rails. Well written with a good variety of topics.\n\nRuby Flow\n\nThis is a basically a feed where community members post their\nannouncements. It\u2019s an excellent way to find out about new projects and releases. Its also great reading material for your iPhone when you have 5 minutes to kill in line somewhere.\n\nRuby 5 Podcast\n\nAn excellent twice a week podcast that\u2019s five minutes long. It usually covers 4 or 5 recent developments in Ruby.\n\nRails Envy Podcast\n\nPretty much everyone in the Rails community has heard of this podcast. I tend to store these up on my iPod and listen to 4 or 5 at once when I have a long commute that day.\n\nRailscasts Screencasts\n\nThe best single resource for discovering practical examples of Ruby on Rails. Ryan Bates produces high quality screencasts every week and this is the first place I go when I need to find an example of a specific feature in Rails.\n\nPractical Ecommerce\n\nPractical Ecommerce\n\nBio\u00a0\u00a0 \u2022 \u00a0\u00a0RSS Feed\n\n\nSign up for our email newsletter",
        "topic_id":2,
        "format_id":9,
        "topic_confidence":0.9224245548,
        "format_confidence":0.9557670951
    }
]