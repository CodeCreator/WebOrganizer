[
    {
        "url":"http:\/\/encyclopedia.kids.net.au\/page\/op\/Opensource?title=QING_Public_License",
        "text":"Encyclopedia > Opensource\n\n\u00a0 Article Content\n\nOpen source\n\nRedirected from Opensource\n\nOpen-source computer software is software whose source code is either in the public domain or, more commonly, is copyrighted by one or more persons\/entities but licensed to all according to an open source license. Such a license grants permission to use and redistribute the software, as well as to modify its source code and distribute modified versions, with at most minor restrictions (such as a requirement to preserve the authors' name and copyright statement in the code). The term open source in common usage may also refer to any software with publicly available source code, regardless of its license, but this usage provokes strong disapproval from the open source community.\n\nTable of contents\n\n\"Open source\" and \"Free software\"\n\nIn the strict definition, the term \"open source\" is distinct from \"free software,\" and it should only be applied to software that meets the terms of the Open Source Definition (see also the Free Software Foundation's Free software definition). The decision to adopt the term \"open source\" was based partly on the confusion caused by the dual meaning of the word \"free\"; the FSF intended the word to mean \"free speech, not free beer,\" but nevertheless, free software came to be associated with zero cost, a problem which was exacerbated by the fact that a great deal of it is, in fact, free of charge. It was hoped that the usage of the newer term \"open source\" would eliminate such ambiguity, and would also be easier to \"market\" to business users (who might mistakenly associate \"free software\" with anti-commercialism). Since its introduction, however, the \"open source\" label has been criticized for fostering an ambiguity of a different kind: that of confusing it for mere availability of the source, rather than the freedom to use, modify, and redistribute it.\n\nThe Free Software Definition is slightly more restrictive than the Open Source Definition; as a consequence of this, free software is open source, but open source software may or may not be \"free.\" In practice, the amount of software released under a license that meets the open source definition, but which the FSF does not regard as free software, is quite small. (One of the few examples is the Apple Public Source License, which is considered open source but not free because it does not allow private modified versions.) For instance, software distributed under both the GPL and BSD licenses are considered both free and open source (the original BSD License had terms legally incompatible with the GPL, but this practical issue is a separate issue from its free-ness). Confusion about the distinctions between free and open source software is the source of some misunderstanding, particularly in the mass media, where the two are often applied interchangeably.\n\nThe open source movement\n\nThe open source movement is a large movement of programmers and other computer users to give easy access to computer software. It grew out of the Free software movement, and the line between the two is somewhat blurry. Mostly, the Free software movement is based upon political and philosophical ideals (sometimes referred as hacker culture), while open source proponents tend to focus on rather pragmatic matters. Both groups assert that this more open style of licensing allows for a superior software development process, and therefore that pursuing it is in line with rational self-interest. Free software advocates, however, would argue that \"freedom\" is a paramount merit that one should prefer (or at least weigh heavily) even in cases where proprietary software has some superior technical features.\n\nProponents of the open source development methodology claim that it is superior in a number of ways to the closed source method. Stability, reliability, and security are frequently cited as reasons to support open source. One successful application of the open source model is the Linux operating system, which is renowned for its stability and security characteristics. Among the works that explore and justify open source development is a series of works by Eric S. Raymond which includes The Cathedral and the Bazaar and Homesteading the Noosphere.\n\nOpen source advocates point out that as of the early 2000s, at least 90 percent of computer programmers are employed not to produce software for direct sale, but rather to design and customize software for other purposes, such as in-house applications. According to advocates, this statistic implies that the value of software lies primarily in its usefulness to the developer or developing organization, rather than in its potential sale value, and that consequently there is no compelling economical reason to keep source code secret from competitors.\n\n\nProjects and Organizations\n\nCompanies Involved in Open Source Development\n\nExamples of Open Source Licenses\n\nFor a more extensive list, see Open source license.\n\nExamples of Open Source Software\n\nFor a more extensive list, see Open source software.\n\nSee also open content for non-programming open source projects.\n\nSee also: Closed source, Proprietary software, Halloween documents, Open Cola, SourceForge, GNU Savannah, Open Law project, Gift economy,\n\nExternal links\n\nAll Wikipedia text is available under the terms of the GNU Free Documentation License\n\n\u00a0 Search Encyclopedia\n\nSearch over one million articles, find something about almost anything!\n\u00a0 Featured Article\nList of famous gay, lesbian or bisexual people\n\n... of famous individuals is often subject to rumor simply because of a tabloid article. Some stars, especially those about whom rumors most often circulate, wish to maintain ...",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.7335212827,
        "format_confidence":0.9935818911
    },
    {
        "url":"https:\/\/branch.io\/glossary\/deep-linking\/",
        "text":"Deep Linking\n\nMobile app deep links (also known simply as \u201cdeep links\u201d) point to content that exists inside an app. If you want to share a pair of shoes from the Cole Haan app with a friend, you can send a deep link that brings your friend directly to those shoes in the app. Without a deep link, your friend would have to find the Cole Haan app on the App Store or Play Store, open the app to the homepage, locate the Search function, and then try to find the same pair of shoes you did.\n\nOne of the biggest problems with mobile deep links is the multitude of standards and platforms. Each of these platforms has come up with a deep linking standard that works with their platform only, but takes neither the substantially more complicated, more intricate overall mobile ecosystem, nor the accompanying linking needs into consideration. The recent trend in multi-platform linking (including iOS Universal Links, Android App Links, and Facebook App Links) has been distorting web links to also accommodate apps. With this approach, a regular web link points to multiple destinations simultaneously and the local client is responsible for determining which one to load. It\u2019s fundamentally confusing, a hack on the existing system, and it breaks as soon as content exists on one platform but not another.\n\nAs mobile ecosystems have evolved, large mobile platforms (Facebook, Twitter, Gmail, etc.) have started a war over users\u2014each fighting to be the ultimate platform where users channel their attention and spend their time. In response, each platform has designed experiences in vacuum, as if the some or all of the other platforms weren\u2019t in existence. Since there is no unification, and following the emergence of deep linking standards for each individual platform, it has become nearly impossible for a brand to create a standard that fit all these standards.\n\nApple and Google both try to pretend that mobile deep linking is a simple thing. A check-the-box, \u201cnice to have\u201d feature that can be implemented by following a few guides buried deep in the developer documentation for each platform. Unfortunately, this couldn\u2019t be further from the truth, and more importantly, it misses the true scale of the problem: if links are to be used everywhere, they need to work everywhere. The true complexity of how difficult this is to accomplish only becomes clear with much painful experimentation.\n\nToday, there are numerous competing mobile deep link standards, all with different functionality and requirements for implementation:\n\nNote: iOS and Android together control 99.3% of the mobile market. Because of this, Branch has very limited support for other platforms, and they are omitted here for simplicity.\n\nEven within each platform, every web browser does things differently. This matters, since the majority of link clicks still happen in browsers, and every link routing system relies on browsers for at least some core functionality:\n\nThings get even messier outside the web browser sphere. So many other apps are capable of opening links that attempt to generate a comprehensive list would be an impossible task, but here are a few notable highlights:\n\nReady to ignite your mobile growth?\n\nTake a tour of our platform to see how Branch can help you everywhere. Or jump right into the code.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.8905864358,
        "format_confidence":0.7438370585
    },
    {
        "url":"https:\/\/www.repeato.app\/what-is-the-difference-between-verification-and-validation\/",
        "text":"What is the difference between verification and validation?\n\nvalidation vs verification\n\n21 February 2022 stoefln Leave a comment Manual testing, QA\n\n\u2026or is there even a distinction between validation and verification?\n\nTesters get asked these questions on a daily basis \u2013 \u201cHave you verified the system? Have you validated the feature?\u201d The terms validate and verify are frequently used interchangeably, but what exactly do they imply? Is there a distinction? Yes, and you must do both in the worlds of software development and quality assurance. It\u2019s even more critical for the tester to grasp what they are, what each entails, in a world where continuous delivery is the new norm.\n\nExample for Software Validation vs Software Verification\n\nLet\u2019s take an example. Let\u2019s say you want to drive to your friend\u2019s place. During your ride, you would constantly\u00a0verify the route taken and compare it to the numerous landmarks that emerge. That\u2019s called verification.\n\nOnce you\u2019ve arrived, the validation effort is unconcerned about the route you took; all that matters is that you\u2019ve arrived and that everything is as expected. Your friend will confirm and thus validate that you arrived at the right spot.\n\nIn software development, both verification and validation are required to ensure that the correct path is taken and that the correct end results are achieved.\n\nTesting Verification\n\nVerification is a testing technique that can determine if the program fulfills the original specifications or criteria.\n\nThe purpose of the procedure is to answer the question, \u201cDid I build what I said I would?\u201d\nThe IEEE-STD-610 Software Engineering standards formally describe \u201cverification\u201d as:\n\nA test of a system to prove that it meets all its specified requirements at a particular stage of its development.\n\nThe stage of development is a crucial factor to consider. The term \u201cverification of development\u201d refers to the process of checking an application that is still in development to confirm that it meets certain requirements. Code reviews, walkthroughs, and inspections are all part of the verification process. Verification does not necessitate actual program testing.\n\nTesting Validation\n\nReturning to IEEE-STD-610, validation is defined as follows:\n\nAn action that assures that the genuine demands and expectations of an end product stakeholder are met.\n\nSo to sum it up:\n\n  \u2022 Validation occurs after a module or the full application has been completed, but verification occurs while the product is still in development.\n  \u2022 Validation ensures that a stakeholder receives the product they requested.\n  \u2022 Validation is a type of high-level testing that includes regression, user, and performance testing, among other things.\n\nContinuous Validation is used in Agile workflows when short development cycles are combined with continuous feedback from users\/customers.\n\nValidation vs. Verification: What\u2019s the Difference?\n\nThe purpose of verification is to generate a product that meets specifications. Validation will test and \u201cverify\u201d the finished product to check that it was built correctly.\n\nVerification involves little or no code execution, whereas validation necessitates it.\n\nReviews, walkthroughs, inspections, and desk-checking are examples of low-level verification activities. High-level activities such as black-box testing, white-box testing, and non-functional testing are required for validation.\n\nValidation is a dynamic process of testing the real product, whereas verification is a static way of examining documents and files.\n\n\nTags: ,\n\nLike this article? there\u2019s more where that came from.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9898619652,
        "format_confidence":0.5268970728
    },
    {
        "url":"https:\/\/en.everybodywiki.com\/Multimedia_Applications_Development_Environment",
        "text":"\n\nMultimedia Applications Development Environment\n\nFrom EverybodyWiki Bios & Wiki\n\nM.A.D.E. is the Activision game engine used to create the following game titles:\n\n  \u2022 The Manhole\n  \u2022 Return to Zork\n  \u2022 Rodney's Funscreen\n  \u2022 LGOP2\n\nIt was designed by William David Volk who also was the main designer of the point-and-click interface used in Return to Zork, and used a Lisp-like language similar to Infocom's ZIL. MADE's language was created by David Betz. MADE featured video playback, advanced U.I. functionality, and virtual memory. Originally created to port the HyperCard title The Manhole to DOS in 1988.[1] The engine has been announced to be compatible with the ScummVM interpreter.\n\n\n  1. Laraque, J.A. (2010-10-07). \"THE INTERVIEW: WILLIAM D. VOLK\". Obsolete Gamer. Retrieved 11 May 2012.\n\nThis article \"Multimedia Applications Development Environment\" is from Wikipedia. The list of its authors can be seen in its historical\u00a0and\/or the page Edithistory:Multimedia Applications Development Environment. Articles copied from Draft Namespace on Wikipedia could be seen on the Draft Namespace of Wikipedia and not main one.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.8992813826,
        "format_confidence":0.9914229512
    },
    {
        "url":"https:\/\/wiki.haskell.org\/index.php?title=Haskell_Quiz\/The_Solitaire_Cipher&diff=32576&oldid=7324",
        "text":"Personal tools\n\nHaskell Quiz\/The Solitaire Cipher\n\nFrom HaskellWiki\n\n< Haskell Quiz(Difference between revisions)\nJump to: navigation, search\n(dolio was the author)\n(14 intermediate revisions by 11 users not shown)\n\nLatest revision as of 22:13, 14 December 2009\n\nThe first puzzle of the rubyquiz series was to implement the Solitaire cipher [1] Bruce Schneier made for Neil Stephenson's Cryptonomicon [2]. The twist is that it's designed to be done by a Spy in a containment camp with no other tools than a deck of bridge cards.\n\nWhen creating a page, be sure to categorise it as code, with a [[Category:Haskell Quiz]] tag.\n\n[edit] 1 The problem\n\n[edit] 2 Solutions",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9719694853,
        "format_confidence":0.9801897407
    },
    {
        "url":"http:\/\/www.upcscavenger.com\/wiki\/HTML",
        "text":"Product Code Database\nExample Keywords: battlefield -ipad $18-116\n\u00a0\u00a0 \u00bb \u00bb Wiki: Html\nTag Wiki 'Html'.\nHyperText Markup Language, commonly referred to as HTML, is the standard used to create . Along with , and , HTML is a cornerstone technology, used by most websites to create visually engaging webpages, user interfaces for , and user interfaces for many mobile applications. can read HTML files and render them into visible or audible web pages. HTML describes the structure of a along with cues for presentation, making it a markup language, rather than a .\n\nHTML elements form the building blocks of all websites. HTML allows to be embedded and can be used to create . It provides a means to create by denoting structural semantics for text such as headings, paragraphs, lists, , quotes and other items.\n\nThe language is written in the form of consisting of tags enclosed in (like ). Browsers do not display the HTML tags and scripts, but use them to interpret the content of the page.\n\nHTML can embed written in languages such as which affect the behavior of HTML web pages. Web browsers can also refer to (CSS) to define the look and layout of text and other material. The (W3C), maintainer of both the HTML and the CSS standards, has encouraged the use of CSS over explicit presentational HTML since 1997.\n\n\n\nIn 1980, physicist , then a contractor at , proposed and prototyped , a system for CERN researchers to use and share documents. In 1989, Berners-Lee wrote a memo proposing an -based system.Tim Berners-Lee, \"Information Management: A Proposal.\" CERN (March 1989, May 1990). Berners-Lee specified HTML and wrote the browser and server software in late 1990. That year, Berners-Lee and CERN data systems engineer collaborated on a joint request for funding, but the project was not formally adopted by CERN. In his personal notesTim Berners-Lee, \"Design Issues\" from 1990 he listedTim Berners-Lee, \"Design Issues\" \"some of the many areas in which hypertext is used\" and put an encyclopedia first.\n\nThe first publicly available description of HTML was a document called \"HTML Tags\", first mentioned on the Internet by Tim Berners-Lee in late 1991. It describes 18 elements comprising the initial, relatively simple design of HTML. Except for the hyperlink tag, these were strongly influenced by , an in-house (SGML)-based documentation format at CERN. Eleven of these elements still exist in HTML 4.\n\nHTML is a that use to interpret and text, images and other material into visual or audible web pages. Default characteristics for every item of HTML markup are defined in the browser, and these characteristics can be altered or enhanced by the web page designer's additional use of . Many of the text elements are found in the 1988 ISO technical report TR 9537 Techniques for using SGML, which in turn covers the features of early text formatting languages such as that used by the developed in the early 1960s for the (Compatible Time-Sharing System) operating system: these formatting commands were derived from the commands used by typesetters to manually format documents. However, the SGML concept of generalized markup is based on elements (nested annotated ranges with attributes) rather than merely print effects, with also the separation of structure and markup; HTML has been progressively moved in this direction with CSS.\n\nBerners-Lee considered HTML to be an application of SGML. It was formally defined as such by the (IETF) with the mid-1993 publication of the first proposal for an HTML specification: \"Hypertext Markup Language (HTML)\" Internet-Draft by Berners-Lee and , which included an SGML to define the grammar. The draft expired after six months, but was notable for its acknowledgment of the browser's custom tag for embedding in-line images, reflecting the IETF's philosophy of basing standards on successful prototypes. Similarly, 's competing Internet-Draft, \"HTML (Hypertext Markup Format)\", from late 1993, suggested standardizing already-implemented features like tables and fill-out forms.\n\nAfter the HTML and HTML drafts expired in early 1994, the IETF created an HTML Working Group, which in 1995 completed \"HTML 2.0\", the first HTML specification intended to be treated as a standard against which future implementations should be based.\n\nFurther development under the auspices of the IETF was stalled by competing interests. Since 1996, the HTML specifications have been maintained, with input from commercial software vendors, by the (W3C). However, in 2000, HTML also became an international standard (\/ 15445:2000). HTML 4.01 was published in late 1999, with further errata published through 2001. In 2004 development began on HTML5 in the (WHATWG), which became a joint deliverable with the W3C in 2008, and completed and standardized on 28 October 2014.\n\nHTML versions timeline\nNovember 24, 1995\nHTML 2.0 was published as IETF RFC 1866. Supplemental added capabilities\n* November 25, 1995: RFC 1867 (form-based file upload)\n* May 1996: RFC 1942 (tables)\n* August 1996: RFC 1980 (client-side image maps)\n* January 1997: RFC 2070 ()\n\nJanuary 14, 1997\nHTML 3.2 was published as a . It was the first version developed and standardized exclusively by the W3C, as the IETF had closed its HTML Working Group in September 12, 1996.\nInitially code-named \"Wilbur\", HTML 3.2 dropped math formulas entirely, reconciled overlap among various proprietary extensions and adopted most of 's visual markup tags. Netscape's and 's were omitted due to a mutual agreement between the two companies. A markup for mathematical formulas similar to that in HTML was not standardized until 14 months later in .\nDecember 18, 1997\nHTML 4.0 was published as a W3C Recommendation . It offers three variations\n* Strict, in which deprecated elements are forbidden,\n* Transitional, in which deprecated elements are allowed,\n* Frameset, in which mostly only related elements are allowed.\nInitially code-named \"Cougar\", HTML 4.0 adopted many browser-specific element types and attributes, but at the same time sought to phase out Netscape's visual markup features by marking them as in favor of style sheets. HTML 4 is an SGML application conforming to ISO 8879\u00a0\u2013 SGML.\nApril 24, 1998\nHTML 4.0 was reissued with minor edits without incrementing the version number.\n\nAs of mid-2008, HTML 4.01 and ISO\/IEC 15445:2000 were the most recent versions of HTML. Development of the parallel, XML-based language XHTML occupied the W3C's HTML Working Group through the early and mid-2000s.\nOctober 28, 2014\nHTML5 was published as a W3C Recommendation.\n\nHTML draft version timeline\nOctober 1991\nHTML Tags, an informal CERN document listing 18 HTML tags, was first mentioned in public.\nJune 1992\nFirst informal draft of the HTML DTD, with seven See section \"Revision History\" subsequent revisions (July 15, August 6, August 18, November 17, November 19, November 20, November 22)\nNovember 1992\nHTML DTD 1.1 (the first with a version number, based on RCS revisions, which start with 1.1 rather than 1.0), an informal draft\nJune 1993\nHypertext Markup Language was published by the IIIR Working Group as an Internet-Draft (a rough proposal for a standard). It was replaced by a second version one month later, followed by six further drafts published by IETF itself that finally led to HTML 2.0 in RFC1866\nNovember 1993\nHTML was published by the IETF as an Internet-Draft and was a competing proposal to the Hypertext Markup Language draft. It expired in May 1994.\nApril 1995 (authored March 1995)\nHTML 3.0 was proposed as a standard to the IETF, but the proposal expired five months later (28 September 1995) without further action. It included many of the capabilities that were in Raggett's HTML proposal, such as support for tables, text flow around figures and the display of complex mathematical formulas.\nW3C began development of its own as a for HTML 3 and Cascading Style Sheets, but HTML 3.0 did not succeed for several reasons. The draft was considered very large at 150 pages and the pace of browser development, as well as the number of interested parties, had outstripped the resources of the IETF. Browser vendors, including Microsoft and Netscape at the time, chose to implement different subsets of HTML 3's draft features as well as to introduce their own extensions to it. (See ) These included extensions to control stylistic aspects of documents, contrary to the \"belief of that such things as text color, background texture, font size and font face were definitely outside the scope of a language when their only intent was to specify how a document would be organized.\" Dave Raggett, who has been a W3C Fellow for many years has commented for example, \"To a certain extent, Microsoft built its business on the Web by extending HTML features.\"\n\nAlthough its syntax closely resembles that of , has abandoned any attempt to be an SGML application and has explicitly defined its own \"html\" serialization, in addition to an alternative XML-based XHTML5 serialization.\n2011\u00a0HTML5 \u2013 Last Call\nOn 14 February 2011, the W3C extended the charter of its HTML Working Group with clear milestones for HTML5. In May 2011, the working group advanced HTML5 to \"Last Call\", an invitation to communities inside and outside W3C to confirm the technical soundness of the specification. The W3C developed a comprehensive test suite to achieve broad interoperability for the full specification by 2014, which was the target date for recommendation. In January 2011, the WHATWG renamed its \"HTML5\" living standard to \"HTML\". The W3C nevertheless continues its project to release HTML5.\n\n2012\u00a0HTML5 \u2013 Candidate Recommendation\nIn July 2012, WHATWG and decided on a degree of separation. W3C will continue the HTML5 specification work, focusing on a single definitive standard, which is considered as a \"snapshot\" by WHATWG. The WHATWG organization will continue its work with HTML5 as a \"Living Standard\". The concept of a living standard is that it is never complete and is always being updated and... (truncated)",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.8294816017,
        "format_confidence":0.7169105411
    },
    {
        "url":"https:\/\/en.wikibooks.org\/wiki\/J2ME_Programming\/PalmOS_and_J2ME",
        "text":"J2ME Programming\/PalmOS and J2ME\n\nFrom Wikibooks, open books for an open world\nJump to: navigation, search\n\n\nPalm through its PalmOS operating system for PDAs does not supply JVMs packaged with its OS. However, within the different platforms of PalmOS several JVMs have been provided.\n\n\n  \u2022 MIDP 1.0\n  \u2022 CLDC 1.0\n  \u2022 JVM supplied by Sun as MIDP4Palm\n\nPalmOS Garnet[edit]\n\nJVMs provided for the Garnet 5.2 and Garnet 5.4 devices:\n\n  \u2022 MIDP 2.0\n  \u2022 CLDC 1.1\n  \u2022 Web Services JSR 172\n  \u2022 PIM JSR 75\n  \u2022 FileConnection 1.0(GCF)\n  \u2022 JVM is IBM's WEME(known by project name of J9)\n\nTypical devices:\n\n  \u2022 Treo 600\n  \u2022 Treo 650\n  \u2022 Tungsten C\n  \u2022 Tungsten T3\n  \u2022 Tungsten E\n  \u2022 Tungsten E2\n  \u2022 Tungsten T5\n  \u2022 Zire 72\n  \u2022 Palm TX\n\n\nWhile JVMs are not packaged with PalmOS directly, we can still determine the MIDP\/CLDC versions and optional apis by tracking by a combination of device and by JVM OEM.\n\nSee also[edit]\n\n\nTrademark Notices[edit]\n\nJ2ME, Java and all Java-based marks are trademarks or registered trademarks of Sun Microsystems, Inc. in the U.S. and other countries. All other Trademarks are property of their respective owners.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.804145515,
        "format_confidence":0.9842037559
    },
    {
        "url":"http:\/\/m5sim.org\/wiki\/index.php?title=Repository&oldid=4576",
        "text":"From gem5\nRevision as of 12:48, 7 October 2012 by Nilayvaish (talk | contribs) (Replaced m5 with gem5)\nJump to: navigation, search\n\ngem5 uses the Mercurial (a.k.a. hg) revision control system. The repository is directly accessible at This website provides browser access to history and changesets and the ability to \"clone\" (create your own copy of) the repository on your local machine.\n\nWe host two source repositories:\n\n  \u2022 gem5 --- The development repository. Code changes are always committed to this repository first. This code should work, because developers are supposed to run a limited set of regression tests before committing to this repository. However, this code has generally not been tested against the full regression suite, and developers occasionally mess up and commit things that don't work as well as they expected.\n  \u2022 gem5-stable --- The (relatively) stable repository. The head of this repository is the latest version that has passed a full set of regression tests. This repository is updated periodically from the development repository. Our goal is to update it from the development repository on a monthly basis, although that has slipped in the past.\n\nQ: How do I know which repository to use?\n\nA: Whichever one strikes your fancy can be tried first. If you like bleeding edge - go for dev. If you like knowing gem5-stable has passed all of our regression tests, try that one. If whatever you try doesn't work for you, try the other one, as there may have been bugs fixed\/introduced between stable and dev. If neither works for you, go ahead and ask the mailing list. Read Reporting Problems before sending your question to the mailing list.\n\nWhat is it?\n\nMercurial (hg) is a distributed version control system. Every copy of a mercurial repository is complete and fully functional. Any operation (examining history, committing changes, etc) can be done without communicating with a central repository. (In fact, from mercurial's point of view, there is no central repository; the repositories are \"central\" only by user convention.) Instead of having to manually diff\/patch your changes when a new version is released simply executing a command will \"pull\" all changes in the repository into your local repository launching a merge tool whenever necessary. Additionally, patches can be sent to us for inclusion in the repository with a single command.\n\nWhere can I get more information about it?\n\nThe main Mercurial website is here. Joel Spolsky wrote a nice tutorial about mercurial. Other good sources of information about Mercurial is the hg book and the HG Cheat Sheets. We promise that it is worth taking 30 minutes to read some of the documentation to get you started. You may even decide that you really like hg and want to use it in your own projects. We do!\n\nHow do I use it?\n\nThe first thing you need to do is install hg (from either package for your OS\/distribution or from source). Debian and Ubuntu have packages named mercurial that you can install. MacPorts also has a package. The next thing you should do is setup a $HOME\/.hgrc. An example .hgrc is provided below. It enables various extensions that come with Mercurial and allows you to mail patches to the M5 mailing list if you so choose.\n\n# Set the username you will commit code with\nusername=Your Name <your@email.address> \nssh = ssh -C\n\n# Always use git diffs since they contain permission changes and rename info\nqrefresh = --git\nemail = --git\ndiff = --git\n\n# These are various extensions we find useful\n\n# Mercurial Queues -- allows managing of changes as a series of patches =\n\n# PatchBomb -- send a series of changesets as e-mailed patches\nhgext.patchbomb = \n# External Diff tool (e.g. kdiff3, meld, vimdiff, etc)\nhgext.extdiff =\n\n# Fetch allows for a pull\/update operation to be done with one command and automatically commits a merge changeset\nhgext.fetch = \n\n# Path to the style file for the M5 repository \n# This file enforces our coding style requirements\nstyle = \/path\/to\/your\/m5\/util\/\n\nmethod = smtp\nfrom = Your Name <your@email.address>\n\nhost =\n\nBasic Commands\n\nHere are some basic commands for Mercurial, however this is not exhaustive and you should read the Mercurial documentation.\n\nCloning creates a complete and fully functional copy of a repository. To get started you should execute:\n\nhg clone\n\nOnce you've got a clone of the repository, here are a few basic commands you can use:\n\n  \u2022 hg status shows what files have been modified in your repository\n  \u2022 hg diff shows a diff of the modified files\n  \u2022 hg fetch fetches any new updates from the repository you cloned (in this case, gem5-stable), and if necessary merges them with any changes you have made since the last update. Note that fetch is a convenient extension that combines several other primitive hg operations that you can also do separately: hg pull, hg update, and if needed hg merge and hg commit. See the mercurial documentation for more details.\n\nMaking Your Own Changes\n\nFor guidance on how to effectively extend M5 within the Mercurial framework, see our section on Adding Functionality.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.967125535,
        "format_confidence":0.6124408245
    },
    {
        "url":"https:\/\/wiki.eclipse.org\/index.php?title=Eclipse_DemoCamps_November_2010\/Bay_Area&oldid=224079",
        "text":"Skip to main content\nJump to: navigation, search\n\nEclipse DemoCamps November 2010\/Bay Area\n\n< Eclipse DemoCamps November 2010\nRevision as of 16:11, 18 October 2010 by (Talk | contribs) (New page: Image:Eclipse_DemoCamp_New.jpg What is an Eclipse DemoCamp? === Location === Replay Solutions<br> 2100 Seaport Blvd.<br> Top Floor<br> Redwood C...)\n\n(diff) \u2190 Older revision | Latest revision (diff) | Newer revision \u2192 (diff)\n\nEclipse DemoCamp Old.jpg What is an Eclipse DemoCamp?\n\n\nReplay Solutions\n2100 Seaport Blvd.\nTop Floor\nRedwood City, CA 94063\n\nDate and Time\n\nComing soon\n\n\nEclipse logo.png\n\n\nJonathan Lindo, Replay Solutions\nPieter Humphrey, Oracle\n\n\nIf you would like to present at the DemoCamp, please feel free to add your name and topic to the list.\n\n  1. Name, Company, Topic\n\nWho Is Attending\n\nIf you plan on attending please add your name and company to the list below. If you have any trouble with the wiki, just send an email to jonathan.lindo at replaysolutions dot com.\n\n  1. Jonathan Lindo, Replay Solutions\n  2. Pieter Humphrey, Oracle\n\nBack to the top",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9592922926,
        "format_confidence":0.6923756003
    },
    {
        "url":"http:\/\/everything2.com\/title\/sexp",
        "text":"According to the Jargon File, appending a p to a word in some hacker slang turns the word into a question expecting a yes or no answer.\nTherefore, saying \"sexp?\" would be asking for sex.\n\n(Supposedly, this is from LISP)\n\nAlso Lisp-related: `sexp' is an abbreviation for `s-expr', itself an abbreviation for `s-expression', itself an abbreviation for `symbolic expression'. A sexp is simply a Lisp expression (be it code or data); `s' distinguishes it from the `meta-expressions' of early Lisps (McCarthy's 1.5, for example). In these Lisps, programs could be expressed with an Algol-derived syntax (m-exprs), or with the parenthesised notation that was also used for expressing lists (s-exprs). s-exprs caught on; m-exprs didn't. Now, almost forty years later, you'll be hard-pressed to find someone who knows what an m-expr is. Then again, you would have back then, too.\n\nin emacs, any \"balanced expression\", like a block in C\/C++ code that begins with a left-brace, {, and ends with a right-brace, }. (Or in Visual Basic code, a block beginning with an \"If\", and ending with an \"Endif\". Sick, twisted, I know, but true, nonetheless...)\n\nIn the rest of the world, short for \"S-expression\", which is, in turn, short for \"Symbolic Expression\"1. Sexps are an idea widely used in Lisp (and Scheme), in various forms. In its most basic form, a sexp can be either an atom, or a dotted pair of sexps.\n\nSo, A is a sexp, if A is an atom, A . A is also a sexp, as is A . (A . B), and (A . B) . (C . D). In Lisp, lists are formed as recursive sexps; that is, (A . (B . (C . nil))) is the list of A, B, and C, where nil is also an atom, and denotes the end of a list.2\n\nThis brings us to our good friends, car and cdr, which are used to access the left and right elements of a sexp, respectively. (When dealing with lists, they can be viewed as \"head\" and \"tail\", again, respectively.)\n\nUsed in the IETF's Simple Public Key Infrastructure (SPKI). From RFC 2693:\n\nS-EXPRESSION: the data format chosen for SPKI\/SDSI. This is a LISP-like parenthesized expression with the limitations that empty lists are not allowed and the first element in any S-expression must be a string, called the \"type\" of the expression.\nFor more information on that, see\nor the RFC itself.\n\n1Any similarity between this phraseology and neil's is purely coincidental, I promise... see? the nodes were written simultaneously; I just happened to take more time, with mine. FINE, DON'T BELIEVE ME!! SEE IF I CARE!\n\n2in case you couldn't tell, I am using all A, B, C, and D as atoms. I would have explained that earlier, but I would hope that it's obvious? Maybe not...\n\nLog in or registerto write something here or to contact authors.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9676423669,
        "format_confidence":0.7812295556
    },
    {
        "url":"https:\/\/doomwiki.org\/wiki\/QZDoom",
        "text":"From DoomWiki.org\n\nUnder construction icon-yellow.svgThis article or section is a stub. Please help the Doom Wiki by adding to it.\nStandard ZDoom\nCodebase GZDoom\nDeveloper(s) dpJudas, Eruanna\nInitial release 0.1 (2016-10-18, 17 months ago)\nLatest release 1.3.0 (2017-03-19, 12 months ago)\nDevelopment status Active\nWritten in C++\nTarget Platform Cross-Platform\nAvailable in English (United States)\nLicense DSL, BSD, others\nWebsite https:\/\/qzdoom.drdteam.org\/\nSource Repository\n\n\n\nQZDoom is a fork of GZDoom with support for 32-bit true-color rendering, first released on October 18, 2016. It was created by dpJudas and Rachael Alexanderson (Eruanna). It was originally opened as a pull request against ZDoom, to replace the 8-bit software renderer with a 32-bit one, but negative responses and lack of motion toward adoption from ZDoom's core developer team, combined with movement of the project in a radically new direction, eventually led to it becoming a separate project.[1]\n\nAfter the true-color renderer was merged in the parent port for the GZDoom 3.0 release, QZDoom now serves as an experimental port to test and refine ambitious new features before their eventual inclusion into GZDoom.\n\nExternal links[edit]\n\n\n  1. Gez\u00a0(28 May 2016). \"Truecolor software rendering.\" ZDoom forums. Retrieved 19 October 2016.\nSource code genealogy\nBased on Name Base for\nGZDoom QZDoom Active",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9711602926,
        "format_confidence":0.9680681825
    },
    {
        "url":"https:\/\/googleweblight.com\/sp?hl&geid=NSTNR&u=https:\/\/en.m.wikiversity.org\/wiki\/Learning_Java\/Applets",
        "text":"Learning Java\/Applets\n< Learning Java\nSee also\nApplets are Java programs that are used in Internet computing. They can be viewed using an applet viewer or any browser. An applet can perform functions like displaying graphics, animation, accept user input, etc. Applet is derived either from Applet or the newer JApplet class. Both inherit from Container, so if you know how to build JFrame or Frame (used in standalone applications), you largely know how to build the applet. Also, for many simple applets, it is common to just register the mouse listener on the same applet, call repaint() from mouse events when required and provide the paint(Graphics g) method to draw the applet how it must look at the given moment of time.\nApplets are different from applications\nThey are not full featured application programs. They basically are developed for small tasks. There are many restrictions with applets.\n  1. Applets do not use the main() method of Java (the traditional Java programs are required to do so). Method init() is called on startup and must setup the applet. The rest of activity usually happen in various event listeners, registered by init() on the applet components.\n  2. Applets can not read or write to a local computer. This feature provides security to the applets from the local computer and to the local computer from applets.\n  3. Applets can't communicate with other services of the network, apart the originating server.\n  4. Applets can't use other language libraries like C and C++. Traditional programs can do so using so-called native methods.\nApplet security restrictions can be lifted up by creating a so-called signed applet that verifies your identity through an independent authority server. However, it is complex and expensive to do this in a proper way, and if done wrongly (like self-signing) the signature can make the applet look untrustworthy.\nSimple example\nThe following example is made simple enough to illustrate the essential use of Java applets through its java.applet package.\nimport java.applet.Applet\u200b;\u200bimport java.awt.*;\/\/ Applet code for the \"Hello, world!\" example.\/\/ This should be saved in a file named as \"HelloWorld.java\".\u200bpublic class HelloWorld extends Applet { \/\/ This method is mandatory, but can be empty (i.e., have no actual code). public void init() { } \/\/ This method is mandatory, but can be empty. public void stop() { } \/\/ Print a message on the screen (x=20, y=10). public void paint(Graphics g) { g.drawString(\"Hello, world!\", 20,10); }}\nFor compilation, this code is saved on a plain-ASCII file (UTF-8 also works) with the same name as the class and .java extension, i.e. HelloWorld.java. The resulting HelloWorld.class applet should be installed on the web server and is invoked within an HTML page by using an <APPLET> or an <OBJECT> tag. For example:\n<!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/loose.dtd\"> <\u200bHTML\u200b>\u200b<\u200bHEAD\u200b>\u200b<\u200bTITLE\u200b>\u200bHelloWorld_example.html\u200b<\/\u200bTITLE\u200b>\u200b<\/\u200bHEAD\u200b>\u200b<\u200bBODY\u200b>\u200b<\u200bH1\u200b>\u200bA Java applet example\u200b<\/\u200bH1\u200b>\u200b<\u200bP\u200b>\u200bHere it is: <APPLET code\u200b=\u200b\"HelloWorld.class\" WIDTH=\"200\" HEIGHT=\"40\"> This is where HelloWorld.class runs.\u200b<\/\u200bAPPLET\u200b><\/\u200bP\u200b>\u200b<\/\u200bBODY\u200b>\u200b<\/\u200bHTML\u200b>\nDisplaying the HelloWorld_example.html page from a Web server, the result should look as this:\nA Java applet example\nHere it is: Hello, world!\nTo minimize download time, applets are usually delivered in a form of compressed zip archive (having jar extension). If all needed classes (only one in our case) are placed in compressed archive example.jar, the embedding code would look differently:\n<P>Here it is: <APPLET code=\"HelloWorld\" WIDTH=\"200\" HEIGHT=\"40\" ARCHIVE\u200b=\u200b\"example.jar\"\u200b> This is where HelloWorld.class runs.<\/APPLET><\/P>\nApplet inclusion is described in detail in Sun's official page about the APPLET tag.[1]. When you complete your first functional applet, you likely will want to share it somewhere. Unlike pictures, applets are currently not accepted in Wikipedia, but there are some alternative initiatives like Ultrastudio.org. Many applets are also deployed at SourceForge.net project pages. Of course, you can also have your own website, but there your applet may be more difficult to find.\nExample with mouse listener\nThe following applet does all activities that majority of educational applets need: it responds to mouse clicks and drags and orders to repaint itself after the 100\u00a0ms in order to reflect the mouse manipulations. Applets can also interact with the keyboard, but this is less common. The applet below shows the mouse position in black if moved, in blue if dragged and repaints in red if clicked.\nimport java.applet.Applet\u200b;\u200bimport java.awt.Color;import java.awt.Graphics\u200b;\u200bimport java.awt.event.MouseEvent\u200b;\u200bimport java.awt.event.MouseListener\u200b;\u200bimport java.awt.event.MouseMotionListener\u200b;\u200bpublic class HelloMouse extends Applet implements MouseMotionListener\u200b, MouseListener { \/\/ The \"applet state\" int x = -1; int y = -1; Color color = Color.BLACK; \/\/ Register mouse listener here. Mouse listeners can be the \/\/ same class as the applet if the listener methods \/\/ are added. public void init() { \/\/ Forwared mouse movements to mouseMoved, mouseDragged addMouseMotionListener\u200b(\u200bthis\u200b); \/\/ Forwared mouse clicks. addMouseListener\u200b(\u200bthis\u200b); } \/\/ This method is mandatory, but can be empty. public void stop() {} \/\/ Print a message on the screen (x=20, y=10). public void paint(Graphics g) { g.setColor(color); g.drawString(\"The mouse is at \"+x+\",\"+y, 20, 10); } public void mouseDragged\u200b(\u200bMouseEvent e) { x = e.getX(); y = e.getY(); color = Color.BLUE; repaint(100); \/\/ Repaint after 100 ms, } public void mouseMoved\u200b(\u200bMouseEvent e) { x = e.getX(); y = e.getY(); color = Color.BLACK; repaint(100); \/\/ Repaint after 100 ms, } } public void mouseClicked\u200b(\u200bMouseEvent e) { color = Color.RED; repaint(100); } public void mouseEntered\u200b(\u200bMouseEvent e) {} public void mouseExited\u200b(\u200bMouseEvent e) {} public void mousePressed\u200b(\u200bMouseEvent e) {} public void mouseReleased\u200b(\u200bMouseEvent e) {}}\nMouse listeners allow to detect not just the mouse manipulations but also when the mouse enters or leaves the applet area. The MouseEvent structure, that is passed to every method of the listener, contains information about the coordinates of the mouse pointer and also which button has been pressed.\nExample with timer\nThe following example shows how register a timer to change applets on \"its own initiative\" after the programmed period of time. Timer is one of the basic elements of animations, non-interactive demonstrations and computer games. An applet can implement both ActionListener and mouse listeners, combining periodic actions with responses to the user manipulation.\nimport java.applet.Applet\u200b;\u200bimport java.awt.Graphics\u200b;\u200bimport java.awt.event.ActionEvent\u200b;\u200bimport java.awt.event.ActionListener\u200b;\u200bimport javax.swing.Timer\u200b;\u200bpublic class HelloTimer extends Applet implements ActionListener { \/\/ The \"applet state\" that advances up every second. int x = 0; Timer timer; \/\/ Register mouse listener here. Mouse listeners can be the \/\/ same class as the applet if the listener methods \/\/ are added. public void init() { \/\/ Create javax.swing.Timer that fires action events every second \/\/ The second parameter is the action listener. As this applet implements \/\/ ActionListener, we can pass \"this\" here. timer = new Timer(1000, this); timer.start(); } \/\/ This method is mandatory, but can be empty. public void stop() {} \/\/ Print a message on the screen (x=20, y=10). public void paint(Graphics g) { g\u200b.\u200bdrawString\u200b(\u200b\"Counting: \"+x, 20, 10); } \/\/ This method is called by the timer. public void actionPerformed\u200b(\u200bActionEvent e) { x = x + 1; repaint(10); \/\/ Repaint in 10 ms; }}\nEvents listener methods, called by javax.swing.Timer, run in a Swing thread. This means, it is safe to do Swing manipulations like setting texts for labels, etc., without using InvokeAndWait. Mind that there are more classes named \"Timer\" in other packages of Java system library, so be sure you are importing the right one.\nJava.Sun.com Sun's APPLET tag page\nSee also\nInteractive labs (Java applet)\nLast edited on 19 April 2020, at 19:42\nContent is available under CC BY-SA 3.0 unless otherwise noted.\nPrivacy policy\nTerms of Use\nHomeRandomLog inSettingsDonateAbout WikiversityDisclaimers",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.976729393,
        "format_confidence":0.5653114319
    },
    {
        "url":"https:\/\/wiki.snowflakesoftware.com\/display\/GPWFSDOC\/Introducing+Web+Feature+Services",
        "text":"\nSkip to end of metadata\nGo to start of metadata\n\n\nThis section will provide a context to the use of web feature services (WFS). It covers who and what the OGC is and does, what a WFS is, and the history behind OGC WFS specifications.\n\nOpen Geospatial Consortium (OGC) and their goal...\u00a0\n\n\"The Open Geospatial Consortium\u00a0is an international industry consortium of 440*\u00a0companies, government agencies and universities participating in a consensus process to develop publicly available interface standards.\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0 \u00a0*(to date).\n\n\"The OGC Standards support interoperable solutions that \"geo-enable\" the Web, wireless and location-based services and mainstream IT.\"\n\nIn a nutshell then, the OCG is a group of people from industry, government and education who together, produce standards for use in a global context, their ultimate goal being to better enable the use of geospatial solutions. You can read more on the OGC from the\u00a0Further Reading\u00a0section below.\n\nWhat is an OGC Web Feature Service?\n\nIn order to understand what a WFS is, you first must understand what is meant by:\n\n  \u2022 'Feature'\n  \u2022 'Operation'\n\nIn the context of a WFS, a 'Feature' is a representation of a real-world-object; a geographic feature. That feature is represented by 'data' and is often contained in a database.\n\nAn 'Operation' can be thought of as an action - something that performs an action on a data store that itself contains features. Operations are used\u00a0for retrieving and maintaining that data. The type of action (or Operator to use) depends on end user requirements. The different types of Operations available for use within a WFS are detailed in\u00a0WFS Operation Types and Descriptions.\n\nTherefore a Web Feature Service is...\n\nAn open, platform independent web service (request\/response) allowing retrieval and maintenance of features contained within a remote data store. The WFS provides a set of comprehensive operations for discovery, query and transactions on features or individual property values.\n\nWhat is an Application Server?\n\nAn application server is a server often used solely to host applications (software programs). The two application servers we work with are\u00a0Tomcat (Wikipedia)\u00a0and\u00a0JBoss (Wikipedia).\n\nWhat is the WFS process?\n\nClient applications link to the WFS hosted by the application server (e.g Tomcat or JBoss) and submits a WFS request. WFS converts the request to SQL (or other depending on the database in use) to query the underlying database. Data is returned and the WFS then converts it into gml, based on the GO Publisher project translations and specified schema. The client application then displays the gml data.\n\nImage displaying the WFS setup using an application server.\n\nWhat can WFS be used for?\n\nWFS supports a wide range of use cases:\n\nData exchange:\u00a0download data on request or synchronisation for use locally.\n\nDecision-support:\u00a0directly query data within client applications removing the need for local data stores.\n\nData maintenance:\u00a0direct, distributed data maintenance by multiple clients. Removing the need for multiple data maintenance flows, increasing efficiency and quality and reducing latency.\u00a0\n\nHistory of OGC WFS Specification\n\nThe WFS specification is one of the more mature web service standards developed by the OGC. See WFS Conformance Classes for more information on\n\nWFS 1.0.0\n\nThe WFS specification was first developed in 2002 (WFS 1.0.0) alongside the GML 2.1.2 specification which is the default payload encoding.\n\nThe first version of the WFS specification supported 5 operations:\n\n  1. GetCapabilities,\n  2. DescribeFeatureType,\n  3. GetFeature,\n  4. Transaction and\n  5. LockFeature.\n\nWFS 1.1.0\n\nThe specification was subsequently revised in 2005, following the development of the GML 3.1.1 and Filter Encoding 1.1 specifications.\n\nThe WFS 1.1.0 specification included 2 new operations;\n\n  \u2022 GetGMLObject and\n  \u2022 GetFeatureWithLock\n\nIt also introduced some new query functions such as resolving references to remote features\/objects.\u00a0WFS 1.1.0 was the first version of the specification to be implemented by many proprietary and open source software vendors and you can now find several compliant WFS 1.1 servers.\n\nWFS 2.0\n\nIn November 2010, the latest version of the WFS specification (WFS 2.0) was published. This was a major release of the WFS specification as it has now been adopted as an ISO TC 211 standard as well as an OGC specification, demonstrating maturity. The WFS 2.0 specification is currently being adopted by many national, international and global initiatives within many domains\u00a0(e.g. INSPIRE, NSDI, SESAR\/NextGen) as the preferred open\u00a0web service interface for interoperable data exchange.\n\nIn the WFS 2.0 specification, four core WFS Conformance Classes are defined that specify a minimum set of operations and behaviours that the WFS supports.\n\nOverview of key differences between the WFS specifications\n\nGO Publisher WFS\n\nSnowflake Software's GO Publisher has been extended to support both WFS1.1 and the latest version of the OGC Web Feature Service (WFS 2.0) and Filter Encoding Specification (FES) 2.0. These are the sibling standards to GML3.2.1 and introduce new ways to interact with spatial and temporal data. This is key functionality for fully implementing a number of important GML exchange schemas.\n\nNotable schemas which use GML3.2.1, WFS 2.0 & FES 2.0:\n\n  \u2022 \u00a0\u00a0\u00a0 AIXM5.1 - Aeronautical Information Exchange Model\n  \u2022 \u00a0\u00a0\u00a0 WXXM1.1 - Weather Exchange Model\n  \u2022 \u00a0\u00a0\u00a0 INSPIRE - Infrastructure for Spatial Information in Europe to support environmental policies\n  \u2022 \u00a0\u00a0\u00a0 CAFE - Clean Air For Europe initiative\n\nMake your WFS RESTful!\n\nIntroducing REST Services provides you with an introduction to implementing your WFS using Representational state transfer (REST) infrastructure.\n\nFurther Reading\n\nYou can either read\u00a0GO Publisher WFS User Guide\u00a0or\u00a0GO Publisher WFS Administrator Guide. To find out which would suit you best, return to the\u00a0GO Publisher WFS 4.2\u00a0homepage.\n\nOpen Geospatial Consortium (Wikipedia)\n\nAbout the Open Geospatial Consortium\n\nWeb Feature Service (Wikipedia)",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.7365581989,
        "format_confidence":0.6425715685
    },
    {
        "url":"http:\/\/en.wikipedia.org\/wiki\/ARINC_661",
        "text":"From Wikipedia, the free encyclopedia\nJump to: navigation, search\nStatus Published\nYear started 2001\nLatest version 5\nApril 2013\nOrganization AEEC - Engineering Standards for Aircraft Systems\nDomain Avionics\nAbbreviation ARINC 661\nWebsite ARINC 661 website\n\nARINC 661 is a standard which aims to normalize the definition of a Cockpit Display System (CDS), and the communication between the CDS and User Applications (UA) which manage aircraft avionics functions. The GUI definition is completely defined in binary Definition Files (DF).\n\nThe CDS software is constituted of a kernel which is able to create the GUI hierarchy specified in the DF during initialization, thus not needing to be recompiled if the GUI definition changes.\n\nHistory and adoption in industry[edit]\n\nThe first version of the standard was adopted in 2001. Its first use was for Airbus A380 CDS development. The first supplement was adopted in 2003, and added new widgets. The second supplement was adopted in June 2005, and added supplementary widgets. Third supplement has been adopted in 2007.[1] Supplement 4 was adopted in 2010.\n\nThe standard is known today to be used for Airbus A380 and A400M CDS development,[2][3] and also Boeing 787 CDS development.[4] AgustaWestland company use ARINC 661 for the development of a new Touchscreen unit in the upgraded Merlin helicopter for the Royal Navy.[5][6][7][8] In March 2011, Embraer announced that it selected SCADE Solutions for ARINC 661, a COTS (Commercial Off The Shelf) tool for ARINC 661 development, for its future developments.[9]\n\nSupplement history[edit]\n\nSupplement Release Date Highlights\nInitial version 2001 First use for Airbus A380 development\n1 2003 New widgets, vertical maps\n2 June 2005 New widgets\n3 2007 New widgets\n4 2010 New widgets\n5 2013 New widgets, widgets extensions, Look specification, User Application to Cockpit Display System interface specification\n\nTechnical overview[edit]\n\nThe standard normalizes\u00a0:\n\n  \u2022 the GUI definition of the CDS interface, in a binary file called DF (Definition File) defining the structure of the graphical interface tree. The GUI tree is instantiated at initialization time (called the Definition Phase in the standard) in the CDS, using the definition contained in the DF.\n  \u2022 the communication at runtime between the User Applications (UA) and the CDS. This communication protocol is typically used for UAs to send widgets modifications to the CDS, and return user events (such as buttons selection) from CDS to UA.\n\nIn order to be compliant with the standard, a CDS must have a kernel that can create the widgets tree during CDS initialization, using the Definition File, and communicate with UA in both ways using the runtime protocol.\n\nARINC 661 does not imply the use of a particular Data bus structure to perform the low-level communication between CDS and UA. For example, an ARINC 429 or ethernet protocol can be used, but it is not mandatory.\n\nGUI definition[edit]\n\nEach DF binary file specify the GUI definition for one User Application (UA) User interface. Several UA user interface trees can be combined to constitute the CDS display definition.\n\nA DF is composed of two parts\u00a0: an optional symbol definition, and a widgets definition. The widget library is similar to Widgets used in computing. There are Containers, Lists, ScrollPanes, Buttons, Menus, Labels, EditBoxes, etc...\n\nAlthough the DF File is binary, the standard has also defined an associated XML definition, which is easier to manipulate in tools.\n\nRelationship with other UI languages[edit]\n\nThe concepts used by ARINC 661 are close to those used in User interface markup languages, except that the UI language is binary and not XML based.[10]\n\nMain similarities from other User interface markup languages:\n\n  \u2022 The interface definition is not hard-coded in the CDS. Instead, the CDS use a kernel which instantiate the widget tree at initialization, using a predefined widget library\n  \u2022 The widget list and the structure of the widget tree are similar to what can be found in common Widget toolkits\n  \u2022 The Look and feel is separated from the definition of the interface\n\nMain differences from other User interface markup languages\u00a0:\n\n  \u2022 The widget library defined in the standard does not really take advantage of its object nature, contrary to other User interface markup languages. For example, there is no notion of inheritance in the standard, although the same properties can be used more than once for several widgets.\n  \u2022 Some Widget toolkits or User interface markup languages have the ability to lay out widgets automatically in a container (see for example the box model in XUL, or the layouts in Java Swing). Widgets position and size in their container must always be defined exactly in an ARINC 661 definition. However, the supplement 3 of the standard has added a limited sort of \"relative\" layout capability between widgets (see Layout manager).\n  \u2022 There is no mechanism for defining the presentation and interactive behavior of elements equivalent to XBL used in XUL (or sXBL used in SVG). There are symbols that can be reused, but they are mainly shapes that cannot have behaviors (apart from defining their position, rotation, and color), or specific bindings.\n  \u2022 There is no equivalent of Cascading Style Sheets, as they are used in XUL or SVG for example. Instead, the Look and feel of the interface is hard-coded in the ARINC 661 kernel. However, supplement 5 introduced a way to specify the Look of widgets.\n  \u2022 The standard does not have an equivalent of Javascript, as used in SVG and XUL, so all specific behavior associated with the widgets must be performed by the UAs.\n  \u2022 The standard has defined specific \"Map\" widgets which allows to present elements such as Flight plans in CDS.\n\n\nThe following example presents the XML Definition File for a Layer containing a panel enclosing a label, which shows the text \"Hello World!\". Note that contrary to most widget toolkits, ARINC 661 widgets origins are relative to the lower left-hand corner of their parent container, and screen units are not in pixel but in 1\/100 of millimeters.\n\n  <?xml version=\"1.0\"?>\n  <!DOCTYPE a661_df SYSTEM \"a661.dtd\">\n  <a661_df library_version=\"0\" supp_version=\"2\">\n      <prop name=\"ApplicationId\" value=\"1\"\/>\n        <prop name=\"LayerId\" value=\"5\"\/>\n        <prop name=\"ContextNumber\" value=\"23\"\/>\n        <prop name=\"Height\" value=\"10000\"\/>\n        <prop name=\"Width\" value=\"10000\"\/>\n      <a661_widget name=\"SamplePanel\" type=\"A661_PANEL\">\n          <prop name=\"WidgetIdent\" value=\"1\"\/>\n          <prop name=\"Enable\" value=\"A661_TRUE\" \/>\n          <prop name=\"Visible\" value=\"A661_TRUE\" \/>\n          <prop name=\"PosX\" value=\"0\"\/>\n          <prop name=\"PosY\" value=\"0\"\/>\n          <prop name=\"SizeX\" value=\"10000\"\/>\n          <prop name=\"SizeY\" value=\"10000\"\/>\n          <prop name=\"StyleSet\" value=\"STYLESET_DEFAULT\" \/>\n        <a661_widget name=\"Hello World Label\" type=\"A661_LABEL\">\n             <prop name=\"WidgetIdent\" value=\"2\"\/>\n             <prop name=\"Anonymous\" value=\"A661_FALSE\" \/>\n             <prop name=\"Visible\" value=\"A661_TRUE\" \/>\n             <prop name=\"PosX\" value=\"5000\" \/>\n             <prop name=\"PosY\" value=\"5000\" \/>\n             <prop name=\"SizeX\" value=\"1500\" \/>\n             <prop name=\"SizeY\" value=\"1000\" \/>\n             <prop name=\"RotationAngle\" value=\"0.0\" \/>\n             <prop name=\"StyleSet\" value=\"0\" \/>\n             <prop name=\"MaxStringLength\" value=\"20\" \/>\n             <prop name=\"MotionAllowed\" value=\"A661_TRUE\" \/>\n             <prop name=\"Font\" value=\"T4\" \/>\n             <prop name=\"ColorIndex\" value=\"black\" \/>\n             <prop name=\"Alignment\" value=\"A661_CENTER\" \/>\n             <prop name=\"LabelString\" value=\"Hello World!\" \/>\n\nDevelopment and tools support[edit]\n\nARINC 661 GUI development includes tools for the specification of definition files and the kernel that use these files:\n\n  \u2022 Thanks to ARINC 661 concepts, the specification tools have no dependency on the execution platform,\n  \u2022 The kernel itself depends on the execution platform.\n\nCOTS specification tools for DF specification currently include SCADE Solutions for ARINC 661 Compliant Systems, DiSTI's GL Studio ARINC 661 Toolkit and Presagis VAPS XT 661 Toolkit.\n\nEsterel Technologies announced on October 13, 2010, the availability of SCADE Solutions for ARINC 661 in 2011.[11] SCADE Solutions for ARINC 661 allow creating both ARINC 661-compliant CDS and UA. For CDS developers, the toolchain features a complete customizable ARINC 661 compliant model-based widgets library and the automated generation of a portable ARINC 661 server, compliant with the DO-178B\/C safety objectives up to level A. For UA developers, the toolchain features the model-based design and generation of DFs and the automatic generation of communication code between SCADE Suite UA models and the ARINC 661 Server.\n\nThe GL Studio ARINC 661 Toolkit is a plug-in to GL Studio HMI Toolkit that delivers a set of pre-existing customizable widgets, a DF Generator, CDS, Communication Libraries, and a User Application Generator.\n\nPresagis [12] introduced the first COTS ARINC 661 development tool which allows creation of Widgets, Layers, DF Generation and embeddable real-time COTS CDS kernel with DO-178B\/C certification artifacts [13][14] It must also be noted that because of the burden of Avionics software certification, the kernel must be embedded in a DO-178B-compliant environment.\n\nFlexible Software Solutions introduced COTS Testing and analysis tools for ARINC 661 protocol at the beginning of 2012. [15] The UAM tool can be used to test and debug UA and CDS ARINC 661 messaging.\n\nSee also[edit]\n\n\n  1. ^ \"Cockpit Display Systems (CDS) Subcommittee\". AEEC. 2007-06-14. Archived from the original on 11 June 2007. Retrieved 2007-06-16.\u00a0\n  2. ^ Adams, Charlotte (2003-03-01). \"A380 Innovations: A Balancing Act\". Archived from the original on 30 June 2007. Retrieved 2007-06-16.\u00a0\n  3. ^ Adams, Charlotte (2003-07-01). \"Ai... (truncated)",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.5712140203,
        "format_confidence":0.9891492724
    },
    {
        "url":"http:\/\/wikemacs.org\/index.php?title=Info&oldid=46729",
        "text":"From WikEmacs\nRevision as of 21:21, 15 August 2014 by Holocronweaver (talk | contribs) (Protected \"Info\": Excessive vandalism ([Edit=Allow only autoconfirmed users] (expires 02:21, 16 February 2015 (UTC)) [Move=Allow only autoconfirmed users] (expires 02:21, 16 February 2015 (UTC))))\n(diff) \u2190 Older revision | Latest revision (diff) | Newer revision \u2192 (diff)\nJump to: navigation, search\n\nInfo is the hypertext help\/reference browser in GNU Emacs. You invoke its top level with [C-h i] (or M-x info).\n\nAdvanced Command[edit]\n\nM-x info-apropos\nDon't know where to go in Info? Try this command. For example, try M-x info-apropos RET compile RET to get some overview of compilation support in Emacs.\n[C-h r] (or M-x info-emacs-manual)\nLearn how to use GNU Emacs. Very detailed.\n[C-h i] (or M-x info)\nSee the Info manuals of all packages that come with your GNU Emacs, and of any third-party packages and external programs whose info files Info finds in its search path.\nWhile in an Info buffer, jump to some topic of interest. To learn about regular expressions try [C-h r] and [i regular TAB].\nSame as [i] but gives you a list of links.\nTry this if you are lost and overwhelmed by the amount of information available and you want to reflect on where all you went and how you got lost.\n[C-u C-h i]\nYou have installed a Third party package. It includes (or you have created with makeinfo) an info file. This command allows you to browse this info file. To make the info file's contents permanently available in Info's top level, you can add the info file's containing directory to Info's search path using M-x customize-variable RET Info-directory-list, or by editing the INFOPATH environment variable and re-starting Emacs.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.6530438662,
        "format_confidence":0.5757868886
    },
    {
        "url":"http:\/\/foldoc.org\/Object+Lisp",
        "text":"Object Lisp\n\n\nAn object-oriented Lisp developed by Lisp Machines Inc. (LMI) in about 1987. Object Lisp was based on nested closures and operator shadowing.\n\nSeveral competing object-oriented extensions to Lisp were around at the time, such as Flavors, in use by Symbolics; Common Objects, developed by Hewlett-Packard; and CommonLoops in use by Xerox.\n\nLMI submitted the specification as a candidate for an object-oriented standard for Common Lisp, but it was defeated in favour of CLOS.\n\n[\"ObjectLISP User Manual\", G. Dreschere, LMI 1987].\n\nLast updated: 2008-03-19\n\nNearby terms:\n\nObject Linking and EmbeddingObject LispObjectLOGOObject Management Group\n\nTry this search on Wikipedia, OneLook, Google",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9742087722,
        "format_confidence":0.9892262816
    },
    {
        "url":"http:\/\/www.wisegeek.com\/what-is-method-overloading.htm",
        "text":"What Is Method Overloading?\n\nIn object-oriented computer programming, when two or more methods share the same name but have different parameters it is called method overloading.\nArticle Details\n  \u2022 Written By: Kevin Mathews\n  \u2022 Edited By: Angela B.\n  \u2022 Last Modified Date: 22 March 2015\n  \u2022 Copyright Protected:\n    Conjecture Corporation\n  \u2022 Print this Article\nFree Widgets for your Site\/Blog\nSome South American sloths move so slowly that algae can grow in their fur.\u00a0 more...\n\nApril 18 ,\u00a0 1775 :\u00a0 Paul Revere went on his famous nighttime ride.\u00a0 more...\n\nMethod overloading is a feature in most object-oriented programming languages in which two or more methods share the same name but have different parameters. Specifically, the number, data type, and\/or order of the parameters are different. When the code is compiled, the correct method will be automatically selected based on how it is called. Methods are also known as functions in some programming languages, so method overloading is sometimes referred to as function overloading.\n\nA simple example of method overloading would be a method that calculates the area of a square. It might be defined as getArea(Square s). This method could be overloaded to additionally calculate the area of the circle by adding the method getArea(Circle c).\n\nThe primary requirement for method overloading is that the methods share the same name. Their method signatures \u2014 the method name, the number of parameters, and the parameter data types \u2014 should otherwise be unique. In this way, the compiler can determine which method to execute.\n\nConstructors, the methods used to instantiate objects, are often overloaded. This is done to initialize an object with non-default values. For example, an employee object with two fields (name and date of birth, or dob) might have the following overloaded constructors: Employee(), Employee(name) and Employee(name, dob). The first constructor creates an employee object with blank name and dob fields. The second sets the name field, but leaves the dob field blank, and the third defines both the name and dob fields.\n\n\nMethod overloading is most often done to make more than one method appear logically as a single method. In the getArea() example, while there are physically two methods, the caller is presented with a single, logical getArea() method. In this way, getArea() can be expanded to work on other shapes \u2014 triangles, trapezoids, and so on \u2014 while still presenting itself logically as a single method.\n\nMethods are also overloaded to preserve backward compatibility. A method that does a complex calculation could be given a new requirement to optionally perform the same calculation with a slight change. A new parameter is added to the method that will determine how to perform the calculation \u2014 the old way or the new way.\n\nTo avoid having to find all cases in which the method is called and add the new parameter, the method can be overloaded. The new method will have the old signature and be called by existing code. It will not contain any logic itself, and will simply call the modified method and pass in a default of \u201cold way\u201d for the new parameter. New code will call the modified method and pass the new parameter with the appropriate value, old way or new way.\n\nMethod overloading is a type of polymorphism, in which the same logical method can be, in practice, used in multiple ways. Method overloading is not the same as method overriding. Method overriding is where the definition of a method in a parent class is changed by a child class. In this case, both methods will have the same signature.\n\n\n\nYou might also Like\n\nDiscuss this Article\n\nPost your comments\n\nPost Anonymously\n\n\nforgot password?",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9899736643,
        "format_confidence":0.9672195315
    },
    {
        "url":"https:\/\/wiki.bzflag.org\/index.php?title=Webadmin&oldid=6543",
        "text":"From BZFlagWiki\nRevision as of 05:34, 11 July 2009 by Mets (Talk | contribs) (Usage: clearing up path to plugin)\n\nJump to: navigation, search\n\nwebadmin is a standard plug-in that is shipped with the source code. It allows for server management via a standard web browser interface (HTTP). Webadmin is included in v3.0 and later releases. Webadmin is currently under development.\n\n\nWhen the Webadmin is loaded it must have take a parameter that tells the system where the html templates are. The default templates dir is .\/ (current working dir). Since webadmin is an HTTPD plug-in the HTTPServer plugin must be in the same directory as webadmin, or have been previously loaded.\n\nThe usage is:\n\n-loadplugin the\/path\/to\/the\/plugin\/webadmin,the\/path\/to\/the\/templates\n\nor in an already running game:\n\n\/loadplugin the\/path\/to\/the\/plugin\/webadmin,the\/path\/to\/the\/templates\n\n\n-loadplugin \"\/plugins\/webadmin\/webadmin.so,\/plugins\/webadmin\/templates\"\n\n\nWebadmin uses templates to define the various pages that are returned. 2 types of templates are used, include templates, and page templates. Both types use the same BZFS_HTTP_Template system. These templates can be customized if needed.\n\n\nThe standard header provides links to all the standard pages.\n\n\nPage templates always end in .page and are automatically scanned by the plug-in and shown in the default navigation header.\n\nA number of default pages are provided with the distribution;\n\n\nThis page provides a basic overview of the current server, it shows\n\n  \u2022 A player list\n  \u2022 Current Scoring\n  \u2022 Current Map\n  \u2022 Bandwith?\n  \u2022 Number of reports\n  \u2022 Current Polls\n\n\nThis page shows a list of server events with time stamps, including;\n\n  \u2022 Player Join\/Part\n  \u2022 Player Spawn\/Die\n  \u2022 Team Flag Captures\n  \u2022 Flag Pickups\n  \u2022 Kick\/Ban events\n  \u2022 Report events\n\n\nThis page provides more detailed info about the players, it contains the following info per player;\n\n  \u2022 Name\n  \u2022 Lag\n  \u2022 IP\/Host\n  \u2022 Game stats\n  \u2022 Groups and Permissions\n  \u2022 Login\/out history\n  \u2022 Flag history\n  \u2022 Chat text\n\n\nThis page provides a list of server vars with values, and allows them to be set.\n\n\nThis page provides a list server bans, allowing them to be reviewed, added, or removed.\n\n\nThis page shows the chat on the server with an automatic update. It allows the admin to send out chat text as a server message.\n\nHelp Messages\n\nThis pages shows the current help files, and allows them to be edited. (Is this useful?)\n\n\nThis pages shows the current groups, and allows them to be edited.\n\n\nThis pages shows the current reports, and allows them to be cleared.\n\n\nInclude templates are generaly used by the page templates or the plug-in for various common tasks. They are not scanned and listed in the default navigation header.\n\nThese templates are most commonly used for consistent page headers and footers as well as error pages.\n\n\nWebadmin was initially started as part of the 2008 Google summer of code, it's design documents can be found at Webadmin_SOC2008. The plug-in has been rewritten significantly since the end of the Summer of Code.",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.8004398346,
        "format_confidence":0.7452834845
    },
    {
        "url":"http:\/\/directory.fsf.org\/wiki?title=Agnostos&redirect=no",
        "text":"Free Software Foundation!\n\nJoin now\n\n\nFrom Free Software Directory\nJump to: navigation,\n\nAgnostos is a simple Web-based tool for managing to do lists. It's designed to prevent the cerebral stack overflow that occurs when you try to keep track of several simultaneous projects by brainpower alone. You can prioritize tasks (optionally by date), and assign them to individuals, workgroups, departments, or any combination of the three. Tasks can be assigned priorities and due dates, and sorted by status, priority, or due date. The current release includes simple reporting facilities (which describe the progress on a particular project over the previous week) and an 'audit trail' for each task (time and date of each change of status and priority priority, or individual, group, or department to which it is assigned).\n\n\nUser README included\n\n\nDownload version 0.9.9 (stable)\nreleased on 30 March 2001\n\n\nRelated Projects\n\n\nLicenseVerified byVerified onNotes\nGPLv2orlaterJanet Casey31 January 2001\n\nLeaders and contributors\n\nJulian TJ Midgley Maintainer\n\nResources and communication\n\nAudience Resource type URI\nDeveloper,Help,Support E-mail\nBug Tracking E-mail\n\nSoftware prerequisites\n\nKind Description\nRequired to use Apache (1.3.9 or later)\nRequired to use MySQL (3.22.27 or later)\nRequired to use perl 5.005_03 (or later)\n\nThis entry (in part or in whole) was last reviewed on 18 August 2005.\n\n\nPermission is granted to copy, distribute and\/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the page \u201cGNU Free Documentation License\u201d.\n\nThe copyright and license notices on this page only apply to the text on this page. Any software or copyright-licenses or other similar notices described in this text has its own copyright notice and license, which can usually be found in the distribution or license text itself.\n\nPersonal tools",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.5490421057,
        "format_confidence":0.6542583704
    },
    {
        "url":"https:\/\/ariosoft.com\/what-is-the-web-based-development\/",
        "text":"What is the WEB based development\n\n\u00a0 \u00a0\u00a0Two fundamental concepts in Software development are Web application development and Web Service, but the question is that are they the same? They have some similarities and also some differences that make them two separate definitions.\n\nAn application that the users can reach through the internet is called a web application. Generally, any software that is used through a web browser could be called a web application. Web applications have gained immense popularity due to the easiness of use. According to W3C (World Wide Web Consortium) web service is a system of software that allows different machines to communicate with each other through a network. In this article we are going to read about both concepts in details and then compare them to each other.\n\n\nThe web application is a web-based program that uses a web browser as its client. A web application is a software application that a user runs in the web browser. These applications can be used via browsers and there is no need to install them on any devices. They can be run through all browsers such as Mozilla Firefox, Google Chrome, Safari, IE, etc. It gives access to the business data anytime and anywhere through the Internet and the Intranet as well. Nowadays many applications such as WhatsApp, Telegram, Skype, etc. have their web app as well. It is useful for those who are not able or willing to install these apps on their devices. The web app is easy to use and can be used in every device no matter what the OS is. Integrity is one of the most important properties of Web app. It is possible to work with one web app on a device and continue your work using another device anytime somewhere else. A web application can act as a word processor, storing information in the cloud and allowing you to download the document onto your personal hard drive.\n\n\nWhat is the nature of app in real?\n\n\u00a0The web app\u00a0is a\u00a0client-server\u00a0computer program\u00a0which the client runs in a web browser. Client-side programming can be written mainly in JavaScript, HTML5, and CSS. While the HTML commands the browser how to display the content of web pages, the CSS helps the content to be organized in the correct format and proper shape. JavaScript will run JavaScript code on a web page, making some of the content interactive. On the other hand, Server-side programming can be written in Ruby, Java, and Python. In a web application, data can be stored in MySQL or MongoDB. The client-side script deals with the presentation of the information while the server-side script deals with all the hard stuff like storing and retrieving the information.\n\nA web app is different from a dynamic web page in many aspects. A web page mainly emphasizes on the content itself, while a web app is focused on the function of the content. The content on a web page will be equally shown to all users, but the content in a web app is displayed differently based on the interaction and history of the users. One of the major distinction between web page and web app is that the first one can only be used online; it means that the user has to be connected to the Internet in order to read the information on that web page. While the second one, web app, can be used in both online and offline mode. The web application uses application cache feature to work in offline mode. Developers can use the\u00a0Application Cache\u00a0interface to specify resources that the browser should cache and make available to offline users. Applications that are cached load and work correctly even if users click the refresh button when they are offline. All the data such as HTML, CSS, JS, and images are sent from the server to the user\u2019s browser and are stored in the cache. The function of Application Cache is that whenever the user is visiting the web application online, the application cache will be updated automatically and will replace the older data.\n\nOn the other hand, web service is described as a system of software allowing two electronic devices to interact with each other through a network. Web services achieve this task with the help of XML, SOAP, WSDL and UDDI open standards. Web services help different sources applications to interact with each other without sharing important data and all the necessary data is transported through a programmatic interface across a network. This interface can then be added to a web page, to give users particular functionality. Due to this, web services are not particular to one programming language or operating system and there is no need to use any browsers. In order to connect existing programs and reusing code, web services are useful. It also helps two platforms to link data. Web Services can be used to transfer data between Web Applications. Most of the times, web services do not necessarily have a user interface since it is used as a component in an application, while a web application is a complete application with a GUI. Furthermore, web services can be used to communicate or transfer data between web applications running on different platforms.\n\n\nConclusion, definitions and build\n\nAs a conclusion, in order to compare these two definitions, we can claim that even though Web Application and Web Service are a kind of the same thing, but there are some distinctions that make them two different concepts. First of all, a Web application is used by human through their browsers, while a Web Service is used by computers. Second, a Web Application has Graphical User Interface, while it is not necessary for Web Services to have a UI since it is used as a component in an application. Third, Web application is run in client-server environment which the client runs it with the help of a web browser and the server processes the data based on the client request and provides response, while a web service is an Application Program Interface (API) that runs on the server, which provides data to the client over Http through a consistent messaging system.\n\nRelated Posts\n\nLeave a comment",
        "topic_id":2,
        "format_id":7,
        "topic_confidence":0.9889205098,
        "format_confidence":0.8606094122
    }
]