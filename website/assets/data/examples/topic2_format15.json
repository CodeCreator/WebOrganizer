[
    {
        "url":"https:\/\/www.mirkosertic.de\/blog\/2016\/11\/compile-time-speed-gwt-2-8-0-vs-teavm-0-4-3\/",
        "text":"Some years ago I wrote a JavaFX based Game authoring system. It was also written to be ported to different run time environments by using transpiler technologies such as GWT or TeaVM. While TeaVM was heavily improved over time, I haven\u2019t seen a new GWT release in the wild. Now, GWT 2.8.0 is released, and the question arises: Is the compiler still as slow as in 2.7? Well, lets take a look!\n\n\nGWT 2.8.0\n\nTeaVM 0.4.3\n\n\n\n43.777 ms\n\n10.383 ms\n\n12.244 ms\n\nSize of JS in un-optimized mode\n\n3.700 kb\n\n2.890 kb\n\n2.650 kb\n\nSize of JS in optimized mode\n\n1.540 kb\n\n955 kb\n\n1013 kb\n\nIt is interesting and also a little bit weird. The GWT compiler became slower compared to its older 2.7.0 brother. You can see the GWT 2.7.0 performance charts in GWT vs. Dragome vs. TeaVM for Game Programming. While the JS size stayed almost constant, there were no further improvements from the external point of view. Hopefully the J2CL Project will keep improving. Till then, I will stay with TeaVM. Version 0.4.3 is stable and production ready. Version 1.0.0 is currently under development and will hopefully be soon available. TeaVM really rocks!",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.9888794422,
        "format_confidence":0.9795200825
    },
    {
        "url":"http:\/\/raytracey.blogspot.com\/2010\/09\/small-update-on-brigade-real-time-path.html",
        "text":"Friday, September 10, 2010\n\nSmall update on the Brigade real-time path tracer\n\nJacco Bikker has released two new video's of the progress with his real-time path tracer named Brigade, demonstrating some kind of game where a truck has to push gold containers or something. Looks fun:\n\n1. direct lighting (32 samples per pixel):\n2. one bounce of indirect lighting (16 spp):\n\nThere is also an update from Dietger van Antwerpen on the GPU path tracer (subsystem of Brigade path tracer) running with the more advanced ERPT (energy redistribution path tracing) algorithm. He has improved the ERPT code to produce virtually identical results to the path traced reference and released a high quality image with it (ERPT on the left and path tracing on the right):\n\nExplanation from Dietger van Antwerpen in the description at youtube:\n\"After some complains pointing out that in the movie, ERPT is significantly darker then path tracing , I fixed the darkening effect of the ERPT image filter, solving the difference in lighting quality. I made an image ( ) using ERPT for the left half, while using path tracing for the right half and waited until the path tracing noise almost vanished. As you can see, the lighting quality between the left and right half is pretty much the same. (The performance and convergence characteristics remain unchanged)\"\nIt would be interesting to know the time for ERPT and for path tracing to achieve these results.\n\nHe also released a new video showing improvements to the GPU ERPT code:\n\nAs the videos show, ERPT converges considerably faster than standard path tracing and the noise is significantly reduced. Very cool and very impressive. I wonder if the optimized ERPT code will be used in Brigade for real-time animations and games.\n\nNo comments:",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.5032352209,
        "format_confidence":0.996444881
    },
    {
        "url":"http:\/\/blogs.adobe.com\/digitalmedia\/2009\/09\/google_wave_pisses_me_off\/",
        "text":"Google Wave Pisses Me Off\n\nThe hyptasticness that is Google Wave continues to annoy me as a Flash developer and RIA enthusiast. Now I preface all of this by admitting that I haven\u2019t used it; maybe when I get an invite this thing will be worth all of the finger grease that keyboards have endured as people talk about it. And I\u2019m not saying it\u2019s not impressive; it is. It\u2019s a great demo, it does some very cool stuff. I\u2019m not annoyed at Google Wave, I\u2019m annoyed because everything that people like about that demo was doable 3-5 years ago with Flash. Flash Remoting, Flash Communication Server, and our much better user interface capabilities pretty much could have created Google Wave. Now I understand that there\u2019s some excitement because this is built on open standards with a more open model, but people don\u2019t get excited about standards- they get exited about vision. And that\u2019s what kills me.\n\nI don\u2019t care if you\u2019re a Silverlight developer or a Flash developer; the technology platform you\u2019ve got is years ahead of what Google Wave is built on. Yet with all of our UI prowess, our design sense, and our pure and simple technical superiority with things like real time communication and scalability we haven\u2019t built very much that captures people\u2019s imaginations the way that Google Wave has. I think we lack the vision.\n\nI think it could be argued that in some cases we\u2019re TOO visionary. If someone had actually built Google Wave 3-5 years ago it wouldn\u2019t have made the same impact because people wouldn\u2019t have realized what it meant. In the RIA world we live in the bubble of the future. I genuinely think that most of us look 3-5 years ahead because that\u2019s where our technology puts us. When people don\u2019t get what we\u2019re trying to pitch we just move on to the next thing. Look at Augmented Reality. Possible with Flash for a couple of years now but it\u2019s just starting to get some main stream attention. RIA developers seem permanently entrenched in the Technology Trigger of the Hype Cycle and we don\u2019t seem to be able to follow things through to the Plateau of Productivity.\n\nPart of the Wave hypefest is probably because of the world\u2019s love\/hate relationship with Google. When they do something everyone goes nuts and that\u2019s because they really do have the power to change the web. They did it once, they\u2019re big, they\u2019re smart, they can do it again. But there are a lot of smart people in the RIA world. Big companies like Microsoft and Adobe and small ones like Aviary and Picnik. We just don\u2019t seem to encourage the visionary demos, the ones that make people rethink how they\u2019ll communicate and interact. I don\u2019t know if that has to come from the big companies directly or whether it\u2019s something we can encourage startups to do. We don\u2019t have a technology problem; if that was all it took we\u2019d be cranking out Wave-esque demos all the time. We just don\u2019t seem to be able to look at the entire scope of what we\u2019ve been doing for the past couple of years and put it together in a game changing way.\n\nI don\u2019t have a solution, but if you\u2019ve got suggestions, I\u2019m all ears.\n\nShow Comments\n\nHide Comments\n\nComments are closed.",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.9273584485,
        "format_confidence":0.9904125333
    },
    {
        "url":"http:\/\/ruby-x.org\/blog\/a-new-year-a-new-name",
        "text":"Fork me on GitHub\n\nA new year a new name ( 2017-01-02 )\n\nRubyX compiles ruby to binary\n\nThe previous name was from a time in ancient history, three years ago, in internet time over a decade (X years!). From when i thought i was going to build a virtual machine. It has been clear for a while that what i am really doing is building a compiler. A new thing needs a new name and finally inspiration struck in the form of RubyX.\n\nIt\u2019s a bit of a shame that both domain and github were taken, but the - versions work well too. Renaming of the organization, repositories and changing of domain is now complete. I did not rewrite history, so all old posts still refer to salama.\n\nWhat i like about the new name most, is the closeness to ruby, this is after all an implementation of ruby. Also the unclarity of what the X is is nice, is it as in X-files, the unknown of the maths variable or ala mac, the 10 for a version number? Or the hope of achieving 10 times performance as a play on the 3 times performance of ruby 3. It\u2019s a mystery, but it is a ruby mystery and that is the main thing.\n\n2. Type system\n\nAbout the work that has been done, the type system rewrite is probably the biggest.\n\nTypes are now immutable throughout the system, and the space keeps a list of all unique types. Adding, removing, changing type all goes through a hashing process and leads to a unique instance, that may have to be created.\n\n3. TypedMethod arguments and locals\n\nClose on the heal of the type immutability was the change to types as argument and local variable descriptors. A type instance is now used to describe the arguments (names and types) uniquely, clearing up previous imprecision.\n\nArgument and locals type, along with the name of the method describe a method uniquely. Obviously the types may not be changed. Methods with different argument types are thus different methods, a fact that still has to be coded into the ruby compiler.\n\n4. Arguments and calling convention\n\nThe Message used to carry the arguments, while locals were a separate frame object. An imbalance if one thinks about closures, as both have to be decoupled from their activation.\n\nNow both arguments and locals are represented as NamedList\u2019s, which are basically just objects. The type is transferred from the method to the NamedList instance at call time, so it is available at run-time. This makes the whole calling convention easier to understand.\n\n5. Parfait in ruby\n\nParfait is more normal ruby now, specifically we are using instance variables in Parfait again, just like in any ruby. When compiling we have to deal with the mapping to indexes, but that\u2019s what we have types for, so no problem. The new version simplifies the boot process a little too.\n\nPositioning has been removed from Parfait completely and pushed into the Assembler where it belongs.\n\n6. SOML goodbye\n\nAll trances of the soml language have been eradicated. All that is left is an intermediate typed tree representation. But the MethodCompiler still generates binary so that\u2019s good. Class and method generation capabilities have been removed from that compiler and now live one floor up, at the ruby level.\n\n7. Ruby Compiler\n\nFinally work on the ruby compiler has started and after all that ground work is actually quite easy. Class statements create classes already. Method definitions extract their argument and local variable names, and create their representation as RubyMethod. More to come.\n\nAll in all almost all of the previous posts todos are done. Next up is the fanning of RubyMethods into TypedMethods by instantiating type variations. When compilation of those works, i just need to implement the cross function jumps and voila.\n\nCertainly an interesting year ahead.",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.9908211827,
        "format_confidence":0.9409487247
    },
    {
        "url":"http:\/\/romanticrobot.net\/2004\/04\/12\/photo\/",
        "text":"Photo ?\n\nThere\u2019s a photoblog \u2013 based upon the WP code \u2013 in development right now. Played around with a beta version last night but I\u2019ve some file permission issues which I can\u2019t get my head around (it\u2019s not as simple as it sounds \u2013 really), but it might be fun to try, at least for a while. If I can find the GD modules (whatever they are) I can test it all here on my computer too.\n\nThis server setup thing I\u2019ve got now is fantastic. I know those of you who have tried the full WAMP (Windows Apache Mysql Php) thing before will be yawning at this, but it is all so easy and fast to play around with code and with downloaded files. Not having to repeatedly use ftp just removes the annoying obstacle that always slowed these things down, and of course it stops me having to clutter up my webspace \u2013 something I have done many times before.\n\nMy WP guides may be moved to the official site too \u2013 not bad eh ?\n\nNice mod case.",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.885391593,
        "format_confidence":0.9975025058
    },
    {
        "url":"http:\/\/www.androidpaycheck.com\/2012\/04\/29\/what-android-java-linux\/",
        "text":"My journey with Android\n\n\n  \u2022 Sharebar\n\nOver the last year I have been hearing a lot about ANDROID. Most of my friends who were planning to go for Apple iPhone were a bit confused by the new option they had and few of them settled for Android phones too over the iPhone dilemma. Suddenly, a question popped out of nowhere in my mind\u2026\n\nWhat basically Android is ? Is it the name of the phone or name of the software running on it or something else ? I usually get this kind of weird basic questions after thinking about something very deep. So, I thought of writing a post for those with same or similar kind of question. Without much deliberation, lets jump right into it\u2026\u2026\n\nANDROID is a new programming language (not in the strictest sense) as well as the Operating system ( same here ) that is running on your mobile phone much similar to the Windows or Linux running in the desktop \/ laptop.\n\nWhat ? Is Android not a new programming language in the strict sense ? I can hear it\u2026. But, Android language is nothing but Java programming language ported to some other form and consumed in a different format.\n\nTo understand this, a little bit on how Java works\u2026(stay with me)\n\nJava runs on all computers, mobiles, washing machines, set top boxes and pretty much everything portable. This is achieved by introducing a layer between OS and the application coding called \u201cJava Virtual Machine\u201d , in short JVM. This JVM is different for different OSes like Windows, Linux and Mac..etc. The JVM sits between the OS and the Application and will speak with OS on one side and also speaks and \u00a0runs the Java code on the other side. JVM is much more like a language translator so that both OS and Application should understand what each other is communicating among them. So, the famous marketing line of \u201cWrite once. Run everywhere\u201d for Java is born.\n\nJava coding is processed (compiled ) by a processor (compiler) and converted into some format (.class files or byte codes as it is technically known as) that JVM can understand.\n\nNow, how is this related anyway to Android ?\n\nNow, the Android takes these bytes codes ( .class files ) of Java and changes them into some new format (like a totally different language), which is only understood by a new virtual machine called Dalvik Virtual Machine (DVM) [and here comes the new language translator ;)]. So, this is how the Android programming language works internally. So, Android is something like JAVA++ :) Just for fun.\n\nSo, how does a programming language runs as an OS in mobile device is the next valid question that comes to mind. The Android OS is originally a Linux OS on which certain modules are built on. So, is it a Linux ++ ? You can say that , in a way\u2026 :-).\n\nLike Java program coding, Andoid OS is not just a transformation but it is built around a Linux kernel. Take a Linux core and develop new modules around it to make it a complete OS specifically for mobile devices like mobile phones, tablets..etc.\n\nSince Linux is under GPL license, there is perfectly no issue about usage of Linux kernel for the Android OS. But, Sun Microsystems ( now Oracle ) has the rights for certain parts of Java. But, they have not sued Google or Android over this issue possibly due to their belief in Open Source Software (something else might have been the reason, I am not sure).\n\nAs a trivia, Google did not develop Android from the scratch as a project. But, it did bought (acquire) the company called Android in 2005 which was developing the current Android OS as a start-up.\n\nSo, you can say Android = JAVA + LINUX + some X. The next time when you use a Android phone, know that you are using a Linux kernel as well as the code that the cool Apps were written in Java language.\n\nIf you think the article is cool, interesting and informative, please share it in Twitter \/ Facebook with your friends \/ fans using the floating vertically to the left of article. If you share, it will motivate me to produce more such content for you here at Android Paycheck.\n\nThanks for the read and sharing. It means a lot to me personally.\n\nIt\u2019s Vickram signing off for now.\n\n\n  1. indu's Gravatar indu\n    September 19, 2012 \u00a0\u00a0\u00a0\n\n    Your facebook page is not working. Also please provide a \u2018subscribe by email\u2019 option in your blog.\n\n    Have any intention of writing on other programming languages?\n\n  2. savickram's Gravatar savickram\n    September 19, 2012 \u00a0\u00a0\u00a0\n\n    Thanks for pointing that out. It is fixed now.\n\n    I will add that \u2018subscribe by e-mail\u2019 option within couple of days. I have plans to write about Java and Android in this website as of now.\n\n    Thanks for visiting the site. Do come back again this week and subscribe via email.\n\n\n  3. May 13, 2013 \u00a0\u00a0\u00a0\n\n    Thanks for what you have. This really is the most beneficial publish I\u2019ve read\n\n  4. shadow's Gravatar shadow\n    June 14, 2013 \u00a0\u00a0\u00a0\n\n    Thanks Nina for the feedback. A major over haul is long over due and is on the anvil. Please follow the blog for the major revamp and more informative articles about Android programming and Android phones.\n\nLeave a Reply\n\nYour email address will not be published. Required fields are marked *\n\nAndroid Paycheck Calendar\n\nApril 2012\n\u00ab Jan \u00a0 Oct \u00bb\n\nEnter your email address to subscribe to this blog.",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.9367928505,
        "format_confidence":0.9462294579
    },
    {
        "url":"https:\/\/mdzahidh.wordpress.com\/category\/techs\/",
        "text":"July 16, 2008\n\nPointer To C++ Class Methods; Or Should You Call \u2019em \u201cMethod Pointers\u201d?\n\nThis one is after a real long break from blogs :).\nFunction pointer is pretty commonplace among C\/C++ developers unlike \u201cpointer to C++ class methods.\u201d For those who have never used it or even heard of it; it really is very similar to \u201cFunction Pointer\u201d from outside, though its internal mechanism is entirely different and its syntax is quite ugly. So, without much literature, let\u2019s see how one would make a pointer to a C++ method. Before that, let\u2019s review the usual function pointer of C a little bit:\n\n\/\/ define a function type FUNCTION that takes int and char* as argument\n\ntypedef int (*FUNCTION) (int, char*);\n\n\/\/ Declare a funciton pointer f of type FUNCTION\n\n\/\/ and make f point to some function that takes int and char* as argument.\n\nFUNCTION f = some_function;\n\n\/\/ Simply call the function with an int and char* argument\n\n\nSo that\u2019s how function pointers are dealt in C. Following is a snippet that shows how to declare a function pointer that points to a method of a C++ class and then finally shows how to call that method via the function pointer (or \u201cmethod pointer,\u201d if you like to call it that way):\n\n\n\nDecember 6, 2007\n\nExporting STL member variables in a DLL\u00a0(C\/C++)\n\nFiled under: C\/C++ \u2014 mdzahidh @ 9:35 am\n\nHave you ever encountered one such dreaded warning messages ( warning C4251 ):\n\nD:\\Microsoft Visual Studio .NET 2003\\Vc7\\include\\list(93) : warning C4251: \u2018std::_List_nod<_Ty,_Alloc>::_Alnod\u2019 : class \u2018std::allocator<_Ty>\u2019 needs to have dll-interface to be used by clients of class \u2018std::_List_nod<_Ty,_Alloc>\u2019\n\nAnd did you ever wonder what caused it or perhaps how to solve this warning problem. Honestly, I still could not figure out the right workaround with STL containers but found this Microsoft Link useful.\n\nHappy Coding.\n\n\nSeptember 17, 2007\n\nCan a Office Space Have \u201cKarma\u201d?\n\nFiled under: Misc,Techs \u2014 mdzahidh @ 5:36 pm\n\nI\u2019m not a superstitious guy by any means but there are few things that never fail to intrigue me; they keep me pondering \u201cdoes it really work that way?\u201d Even at times I find myself doing things, rather subconsciously, I believe would bring me better luck just because it produced better results in the past. This would even include something as unrelated and silly as using \u201cone particular type of\u201d pen for my univ exams. Every time I thought it was mere stupid I would very soon find convincing myself \u201cthere\u2019s nothing wrong in using this particular pen; and just in case it brings luck, you never know.\u201d At other times, these things don\u2019t really seem all that unrelated as they apparently do. For example, using \u201ca particular type of\u201d pen actually would make me more comfortable while writing and hence wouldn\u2019t infuriate me during a lengthy exam; and my result vastly depended on the variation of my mood along the length of the exam.\n\nI just came to know about one particular office building which has gained some name as having good \u201ckarma!\u201d I didn\u2019t know that companies like Google, PayPal and LogiTech kicked off as toddlers from the same office space! Can a office space really posses luck? Read this and be intrigued.\n\nSeptember 1, 2007\n\nInteresting search strings for\u00a0google\n\nFiled under: Misc,Techs \u2014 mdzahidh @ 12:07 pm\n\nThanks a lot to Wasif who showed me these nice google search strings, whereby you can search stuffs on pages which you cannot access normally. For example you want to have a full mp3 song list of say Bryan Adams to be downloaded straight; you can use one of this search strings which will find the \u201cindex\u201d pages that usually contain all the songs as normal file entries. Usually these index pages are not accessible from any websites. And guess what, it works and I already downloaded loads of stuffs :). Try it out :).\n\nPS: If you know more google tricks, please let me know :).\n\nAugust 30, 2007\n\n1 Man with Visionary and 13 Men Made the\u00a0Difference\n\nFiled under: Game,Techs \u2014 mdzahidh @ 8:46 am\n\nIdThis is for people who are genuinely interested in games. Even if you are not you are still most welcome aboard to be inspired by the tale of 13 men and 1 with visionary; the one who when speaks makes the game industry sit back and listen. This is the tale of John Carmack and his id software.\n\n\nAugust 28, 2007\n\nBe Eclectic With Google Reader\u00a0!\n\nFiled under: Misc,Techs \u2014 mdzahidh @ 6:22 am\n\nFirst of all let me thank Tahmid Bhai for introducing me with Google Reader. Since then I have kind of fallen in love with this yet-another-google-masterpiece (YAGM :p). The \u201cMy Shared Items\u201d that you can see on the widget bar (Left or Right of this page, depending on the current theme) is just a manifestation of the Google Reader.\n\n\nAugust 24, 2007\n\nA Little C\/C++ Recipe You Can Live Without Knowing\u00a0:)\n\nFiled under: C\/C++,Techs \u2014 mdzahidh @ 8:11 pm\n\nYes, read this if you are kind of bored or probably want to be too fussy about \u201cHow things work?\u201d Have you ever wondered how compilers know how many instances of a class had been previously allocated when delete [] is called; because delete [] might have to traverse through each of the object and call their destructor. So it must be running some kind of loop right? But where does the compiler get the number of instances?\n\nAugust 16, 2007\n\nWhat Makes You a Good C\/C++\u00a0Coder?\n\nFiled under: C\/C++,Techs \u2014 mdzahidh @ 7:57 pm\n\nSimple answer to this, perhaps, million dollar question is \u201cExperience.\u201d Now that\u2019s vague enough to be applied to every other language on the planet. So what really does make someone a good C\/C++ coder. Btw, do not even dare asking this question to Bjarne Stroustrup or Dennis Ritchie or perhaps guys like Linus Torvald \ud83d\ude42 since they surely have their own definition of being \u201cgood\u201d which comprise only themselves :).\n\nFollowing is an excerpt of an email that I wrote to someone suggesting him which areas to explore to attend an interview for the game dev team at ReliSource Ltd:\n\n\nAugust 14, 2007\n\n15 years to glory \u2013\u00a0wxWidget!\n\nFiled under: Misc,Techs \u2014 mdzahidh @ 6:13 pm\n\n1992, a guy from University of Edinburg was given the task to design a CASE (Computer Aided Software Engineering) tool to be run in both Windows and Linux system. At that point in time only a few cross platform GUI APIs were available and were very expensive for an university to spend on an in-house experimental tool. But that didn\u2019t stop Julian Smart from designing his CASE tool. He realized that a cross-platform GUI has to be developed first and eventually wxWidget was conceived. Its is probably one of the most talked about Open-Source project after Linux itself !\n\n\nCreate a free website or blog at WordPress.com.",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.9884359837,
        "format_confidence":0.6812620163
    },
    {
        "url":"https:\/\/kolleenshallcross.com\/business-development\/",
        "text":"Navigation Menu+\n\nBusiness Development\n\nPosted on Dec 3, 2013 in Branding, Web Development\n\nClient came to me to help develop a website. We hit it off so well that the conversation turned to direction and business development. I don\u2019t mind sharing knowledge and helping people to help themselves if they can\u2019t afford to hire a social media and SEO expert like myself.\n\nThe site is still being developed since the client had to put the project on hold, but when she\u2019s ready to roll with products placement, a clear line of vision with the ability to grow as her skills and experience continues to blossom.",
        "topic_id":2,
        "format_id":15,
        "topic_confidence":0.9151504636,
        "format_confidence":0.8380500078
    }
]