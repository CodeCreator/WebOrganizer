[
    {
        "url":"https:\/\/china.xilinx.com\/support\/answers\/54363.html",
        "text":"\n\nAR# 54363\n\nRelease Notes and Known Issues for LogiCORE IP MII to RMII for Vivado 2013.1 and newer tool versions\n\n\nThis answer record contains the Release Notes and Known Issues for the MII to RMII IP Core and includes the following:\n\n  \u2022 General Information\n  \u2022 Known and Resolved Issues\n  \u2022 Revision History\n\nThis Release Notes and Known Issues Answer Record is for the core generated in Vivado 2013.1 and newer tool versions.\n\nLogiCORE MII to RMII Core IP Page:\n\n\n\nGeneral Information\n\nSupported Devices can be found in the following three locations:\n\nFor a list of new features and added device support for all versions, see the Change Log file available with the core in Vivado.\n\nVersion Table\n\nThis table correlates the core version to the first Vivado design tools release version in which it was included.\n\nCore VersionVivado Tools Version\nv2.0 (Rev.11)2016.2\nv2.0 (Rev. 10)2016.1\nv2.0 (Rev. 9)2015.4\nv2.0 (Rev. 8)2015.3\nv2.0 (Rev. 7)2015.1\nv2.0 (Rev. 6)2014.3\nv2.0 (Rev. 5)2014.2\nv2.0 (Rev. 4)2014.1\nv2.0 (Rev. 3)2013.4\nv2.0 (Rev. 1)2013.2\n\nGeneral Guidance\n\nThe table below provides Answer Records for general guidance when using the LogiCORE MII to RMII IP Core.\n\nAnswer RecordTitle\n(Xilinx Answer 55248)Vivado Timing and IP Constraints\n\nKnown and Resolved Issues\n\nThe following table provides known issues for the MII to RMII IP core, starting with v2.0, initially released in the Vivado 2013.1 tool.\n\nNote: The \"Version Found\" column lists the version the problem was first discovered.\u00a0\n\nThe problem might also exist in earlier versions, but no specific testing has been performed to verify earlier versions.\n\nPlease also refer to the Change Log for details.\n\nAnswer RecordTitleVersion FoundVersion Resolved\n(Xilinx Answer 66942)MII to RMII v2.0 - Design fails to meet timing with hold violation for MII to RMII corev2.02016.1\n\nRevision History\n\n04\/03\/2013Initial release\nAR# 54363\n\u65e5\u671f 06\/08\/2016\n\u72b6\u6001 Active\nType \u7248\u672c\u8bf4\u660e\n  \u2022 Vivado Design Suite - 2013.1\n  \u2022 Reduced Media Independent Interface",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.6704647541,
        "format_confidence":0.7516396642,
        "weight":0.0625012982
    },
    {
        "url":"https:\/\/www.genosphere-biotech.com\/technical-corner\/custom-genes\/sequence-optimization-consideration\/",
        "text":"Sequence Optimization Consideration\n\nSequence Optimization Consideration\n\nHeterologous protein expression\n\nProtein heterologous expression project can reveal to be a demanding process. Among the many factors that may affect successful expression, that of the actual coding sequence utilized has been shown in many instances to be a central issue. You may benefit from re-designing or creating de novo an expression-prone DNA sequence from he protein sequence.\n\nPoor or no expression, troncated proteins, amino-acids misincorporation are the most common consequences of codon bias and unbalanced tRNA pool.\u00a0\n\nThis issue has been extensively studied for E. coli expression and is perfectly exemplified by the arginine codons AGG and AGA -same tRNA- which are hardly ever found in E. coli highly expressed ORFs while found with significantly higher frequency in many other organisms. It would thus make better sense to replace the latter by codons used more frequently in your host organism e.g. CGT or CGC.\n\nFrequency Codons (AGG\n+ AGA) (% of all arg codons)\nExpression host\n(Highly expressed genes, Henaut and Danchin, Escherichia coli\nand Salmonella, Vol. 2, Ch. 114:2047-2066, 1996)\nE. coli\nRecombinant gene source\n(all genes frequencies, www.kazusa.or.jp\/codon\/)\nA. thaliana\nC. elegans\nD. melanogaster\nH. sapiens\nS. cerevisae\n\nGene design\n\nDesigning a gene that will express in a particular organism a recombinant protein boils down to choosing the most appropriate triplet for each amino acids. With a ratio of 64 codons to 20 aa plus termination there is quite some flexibility to include other constraints in addition to that of codon bias adjustment such as:\u00a0\n\n  \u2022 Gene & protein engineering: Addition or removal of specific motives (e.g. restriction sites), tags for purification, multiple stops, etc.\u00a0\n  \u2022 Gene manufacturing: Maintain average GC content, avoid long repeats, palindroms, etc.",
        "topic_id":19,
        "format_id":20,
        "topic_confidence":0.9899161458,
        "format_confidence":0.8583157063,
        "weight":0.0087218229
    },
    {
        "url":"https:\/\/docs.bitnami.com\/installer\/apps\/opencart\/get-started\/understand-default-config\/",
        "text":"Understand the default MySQL configuration\n\nBefore running the commands shown on this page, you should load the Bitnami stack environment by executing the installdir\/use_APPNAME script (Linux and Mac OS X) or by clicking the shortcut in the Start Menu under \u201cStart -> Bitnami APPNAME Stack -> Application console\u201d (Windows). Learn more.\n\nThe grant tables define the initial MySQL user accounts and their access privileges. The default configuration consists of:\n\n  \u2022 A privileged account with a username of root. The root user has remote access to the database.\n  \u2022 An anonymous user without remote access to the database server. This user can only connect from the local machine and it is only intended for testing.\n  \u2022 A test database only intended for testing.\n\nCheck our recommendations for a production server.\n\nMySQL version\n\nIn order to see which MySQL version your system is running, execute the following command:\n\n$ mysqld --version\n\nMySQL configuration file\n\nThe MySQL configuration file is located at installdir\/mysql\/my.cnf. Some configuration overrides are stored in installdir\/mysql\/bitnami\/my.cnf.\n\nThe MySQL official documentation has more details about how to configure the MySQL database.\n\nMySQL socket\n\nOn Unix, MySQL clients can connect to the server in the local machine using an Unix socket file at installdir\/mysql\/tmp\/mysql.sock.\n\nMySQL port\n\nThe default port for MySQL is 3306.\n\nMySQL Process Identification Number\n\nThe MySQL .pid file allows other programs to find out the PID (Process Identification Number) of a running script. Find it at installdir\/mysql\/data\/\n\nMySQL error log\n\nThe log-error file contains information indicating when mysqld was started and stopped and also any critical errors that occur while the server is running. If mysqld notices a table that needs to be automatically checked or repaired, it writes a message to the error log.\n\nFind it at installdir\/mysql\/data\/mysqld.log.",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.5806062222,
        "format_confidence":0.9450239539,
        "weight":0.0785818349
    },
    {
        "url":"https:\/\/msdn.microsoft.com\/en-us\/library\/h55she1h.aspx",
        "text":"Assembly.ReflectionOnlyLoad Method (Byte[])\n\n\nThe .NET API Reference documentation has a new home. Visit the .NET API Browser on to see the new experience.\n\nLoads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.\n\nNamespace: \u00a0 System.Reflection\nAssembly: \u00a0mscorlib (in mscorlib.dll)\n\npublic static Assembly ReflectionOnlyLoad(\n\tbyte[] rawAssembly\n\n\nType: System.Byte[]\n\nA byte array that is a COFF-based image containing an emitted assembly.\n\nReturn Value\n\nType: System.Reflection.Assembly\n\nThe loaded assembly.\n\nException Condition\n\nrawAssembly is null.\n\n\nrawAssembly is not a valid assembly.\n\n\nVersion 2.0 or later of the common language runtime is currently loaded and rawAssembly was compiled with a later version.\n\n\nrawAssembly cannot be loaded.\n\nYou cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the Load method.\n\nThe reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.\n\n.NET Framework\nAvailable since 2.0\nReturn to top",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.9871003628,
        "format_confidence":0.9829006791,
        "weight":0.0817314086
    },
    {
        "url":"https:\/\/docs.bitnami.com\/installer\/apps\/opencart\/get-started\/understand-default-config\/",
        "text":"Understand the default MySQL configuration\n\nBefore running the commands shown on this page, you should load the Bitnami stack environment by executing the installdir\/use_APPNAME script (Linux and Mac OS X) or by clicking the shortcut in the Start Menu under \u201cStart -> Bitnami APPNAME Stack -> Application console\u201d (Windows). Learn more.\n\nThe grant tables define the initial MySQL user accounts and their access privileges. The default configuration consists of:\n\n  \u2022 A privileged account with a username of root. The root user has remote access to the database.\n  \u2022 An anonymous user without remote access to the database server. This user can only connect from the local machine and it is only intended for testing.\n  \u2022 A test database only intended for testing.\n\nCheck our recommendations for a production server.\n\nMySQL version\n\nIn order to see which MySQL version your system is running, execute the following command:\n\n$ mysqld --version\n\nMySQL configuration file\n\nThe MySQL configuration file is located at installdir\/mysql\/my.cnf. Some configuration overrides are stored in installdir\/mysql\/bitnami\/my.cnf.\n\nThe MySQL official documentation has more details about how to configure the MySQL database.\n\nMySQL socket\n\nOn Unix, MySQL clients can connect to the server in the local machine using an Unix socket file at installdir\/mysql\/tmp\/mysql.sock.\n\nMySQL port\n\nThe default port for MySQL is 3306.\n\nMySQL Process Identification Number\n\nThe MySQL .pid file allows other programs to find out the PID (Process Identification Number) of a running script. Find it at installdir\/mysql\/data\/\n\nMySQL error log\n\nThe log-error file contains information indicating when mysqld was started and stopped and also any critical errors that occur while the server is running. If mysqld notices a table that needs to be automatically checked or repaired, it writes a message to the error log.\n\nFind it at installdir\/mysql\/data\/mysqld.log.",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.5806062222,
        "format_confidence":0.9450239539,
        "weight":0.0785818349
    },
    {
        "url":"https:\/\/docs.eyesopen.com\/toolkits\/java\/oechemtk\/oechem_examples\/oechem_example_sdfmodprops.html",
        "text":"Modifying SD tags\n\nA program that can modify the SD tags on an SD molecule. The flags are: -remove, a list of property tags to be removed (non-matching tags are kept), -keep`, a list of property tags to be kept (non-matching tags are removed), -clearAll, all SD tags are removed. The program formats are limited to those that can have SD data i.e. SDF, OEB, and CSV.\n\n\nprompt > SDFModProps -keep NAME ID_NUM -i dbase.sdf -o output.sdf\nprompt > SDFModProps -clearAll -i dbase.sdf -o output.oeb.gz\n\n\nDownload code\n\n\nSee also",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.959261775,
        "format_confidence":0.970748961,
        "weight":0.0807209534
    },
    {
        "url":"https:\/\/skia.googlesource.com\/external\/github.com\/google\/wuffs\/+\/3842c519c9961500d96efee0ff7aafbd20833570\/doc\/note\/quirks.md",
        "text":"Quirks are configuration options that let Wuffs more closely match other codec implementations.\n\nSome codecs and file formats are more tightly specified than others. When a spec doesn\u2018t fully dictate how to treat malformed files, different codec implementations have disagreed on whether to accept it (e.g. whether they follow Postel\u2019s Principle of \u201cbe liberal in what you accept\u201d) and if so, how to interpret it. Some implementations also raise those decisions to the application level, not the library level: \u201cprovide mechanism, not policy\u201d.\n\nFor example, in an animated GIF image, the first frame might not fill out the entire image, and different implementations choose a different default color for the outside pixels: opaque black, transparent black, or something else.\n\nOther file formats have unofficial extensions. For example, a strict reading of the JSON specification rejects an initial \"\\x1E\" ASCII Record Separator, \"\/\/ comments\" or commas after the final array element or object key-value pair (e.g. \"[1,2,3,]\"), but some extensions to the format allow these and other changes.\n\nWuffs, out of the box, makes particular choices (typically mimicking the de facto canonical implementation), but enabling various quirks results in different choices. In particular, quirks are useful in regression testing that Wuffs and another implementation produce the same output for the same input, even for malformed input.\n\nWuffs API\n\nEach quirk is assigned a uint32_t value, packed using the base38 namespace convention. Decoders and encoders can have a set_quirk_enabled!(quirk base.u32, enabled base.bool) method whose first argument is this uint32_t value.\n\nFor example, the base38 encoding of \"gif \" and \"json\" is 0x0F8586 and 0x124265 respectively, so that the GIF-specific quirks have a uint32_t value of ((0x0F8586 << 10) | g), and the JSON-specific quirks have a uint32_t value of ((0x124265 << 10) | j), for some small integers g and j. The high bits are a namespace. The overall quirk values are different even if g and j re-use the same 10-bit integer.\n\nThe generated C language file defines human-readable names for those constant values, such as WUFFS_JSON__QUIRK_ALLOW_LEADING_UNICODE_BYTE_ORDER_MARK.\n\n\nCommon quirks:\n\n  \u2022 WUFFS_BASE__QUIRK_IGNORE_CHECKSUM configures decoders (but not encoders) to skip checksum verification. This can result in noticably faster decodes, at a cost of being less able to detect data corruption and to deviate from a strict reading of the relevant file format specifications, accepting some inputs that are technically invalid (but otherwise decode fine).\n\nPackage-specific quirks:",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.981941998,
        "format_confidence":0.9795658588,
        "weight":0.0814541073
    },
    {
        "url":"http:\/\/help.simetrix.co.uk\/8.2\/simetrix\/script_manual\/topics\/func_setreadonlystatus.htm",
        "text":"SetReadOnlyStatus Function\n\nSets the read-only status of the specified schematic.\n\n\nNumber Type Compulsory Default Description\n1 real Yes Read-only status\n2 real No -1 Schematic ID\n\nArgument 1\n\nRead only status. If 1.0, will set schematic to read-only; if 0.0 will set to writeable.\n\nArgument 2\n\nSchematic ID as returned by the function OpenSchematic . This allows this function to be used with a schematic that is not open or not currently selected. If omitted or -1, the currently selected schematic will be used.\n\n\nReturn type: string\n\nSingle string defining the success of the operation is defined below.",
        "topic_id":2,
        "format_id":20,
        "topic_confidence":0.8930942416,
        "format_confidence":0.9741926193,
        "weight":0.0810073049
    }
]